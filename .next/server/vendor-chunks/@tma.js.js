"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@tma.js";
exports.ids = ["vendor-chunks/@tma.js"];
exports.modules = {

/***/ "(ssr)/./node_modules/@tma.js/sdk-react/dist/index.js":
/*!******************************************************!*\
  !*** ./node_modules/@tma.js/sdk-react/dist/index.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BackButton: () => (/* binding */ Ne),\n/* harmony export */   BasicNavigator: () => (/* binding */ As),\n/* harmony export */   BiometryManager: () => (/* binding */ je),\n/* harmony export */   BrowserNavigator: () => (/* binding */ se),\n/* harmony export */   ClosingBehavior: () => (/* binding */ Je),\n/* harmony export */   CloudStorage: () => (/* binding */ Xe),\n/* harmony export */   ERR_INVALID_PATH_BASE: () => (/* binding */ Ee),\n/* harmony export */   ERR_INVOKE_CUSTOM_METHOD_RESPONSE: () => (/* binding */ fe),\n/* harmony export */   ERR_METHOD_PARAMETER_UNSUPPORTED: () => (/* binding */ we),\n/* harmony export */   ERR_METHOD_UNSUPPORTED: () => (/* binding */ _e),\n/* harmony export */   ERR_NAVIGATION_HISTORY_EMPTY: () => (/* binding */ ve),\n/* harmony export */   ERR_NAVIGATION_INDEX_INVALID: () => (/* binding */ ye),\n/* harmony export */   ERR_NAVIGATION_ITEM_INVALID: () => (/* binding */ dn),\n/* harmony export */   ERR_PARSE: () => (/* binding */ St),\n/* harmony export */   ERR_SSR_INIT: () => (/* binding */ _n),\n/* harmony export */   ERR_TIMED_OUT: () => (/* binding */ me),\n/* harmony export */   ERR_UNEXPECTED_TYPE: () => (/* binding */ be),\n/* harmony export */   ERR_UNKNOWN_ENV: () => (/* binding */ ge),\n/* harmony export */   EventEmitter: () => (/* binding */ D),\n/* harmony export */   HapticFeedback: () => (/* binding */ es),\n/* harmony export */   InitData: () => (/* binding */ ns),\n/* harmony export */   Invoice: () => (/* binding */ is),\n/* harmony export */   MainButton: () => (/* binding */ as),\n/* harmony export */   MiniApp: () => (/* binding */ us),\n/* harmony export */   Popup: () => (/* binding */ _s),\n/* harmony export */   QRScanner: () => (/* binding */ gs),\n/* harmony export */   SDKError: () => (/* binding */ W),\n/* harmony export */   SDKProvider: () => (/* binding */ rr),\n/* harmony export */   SettingsButton: () => (/* binding */ ms),\n/* harmony export */   ThemeParams: () => (/* binding */ vs),\n/* harmony export */   Utils: () => (/* binding */ Es),\n/* harmony export */   Viewport: () => (/* binding */ Rs),\n/* harmony export */   array: () => (/* binding */ Ze),\n/* harmony export */   bindMiniAppCSSVars: () => (/* binding */ bn),\n/* harmony export */   bindThemeParamsCSSVars: () => (/* binding */ vn),\n/* harmony export */   bindViewportCSSVars: () => (/* binding */ yn),\n/* harmony export */   boolean: () => (/* binding */ E),\n/* harmony export */   captureSameReq: () => (/* binding */ Dt),\n/* harmony export */   classNames: () => (/* binding */ st),\n/* harmony export */   compareVersions: () => (/* binding */ Ie),\n/* harmony export */   createBrowserNavigatorFromLocation: () => (/* binding */ ks),\n/* harmony export */   createPostEvent: () => (/* binding */ qe),\n/* harmony export */   createSafeURL: () => (/* binding */ U),\n/* harmony export */   date: () => (/* binding */ $t),\n/* harmony export */   getHash: () => (/* binding */ xn),\n/* harmony export */   getPathname: () => (/* binding */ ee),\n/* harmony export */   initBackButton: () => (/* binding */ Ge),\n/* harmony export */   initBiometryManager: () => (/* binding */ Ke),\n/* harmony export */   initClosingBehavior: () => (/* binding */ Fe),\n/* harmony export */   initCloudStorage: () => (/* binding */ ts),\n/* harmony export */   initHapticFeedback: () => (/* binding */ ss),\n/* harmony export */   initInitData: () => (/* binding */ rs),\n/* harmony export */   initInvoice: () => (/* binding */ os),\n/* harmony export */   initMainButton: () => (/* binding */ cs),\n/* harmony export */   initMiniApp: () => (/* binding */ ls),\n/* harmony export */   initNavigator: () => (/* binding */ Cn),\n/* harmony export */   initPopup: () => (/* binding */ ws),\n/* harmony export */   initQRScanner: () => (/* binding */ fs),\n/* harmony export */   initSettingsButton: () => (/* binding */ bs),\n/* harmony export */   initThemeParams: () => (/* binding */ ys),\n/* harmony export */   initUtils: () => (/* binding */ Ps),\n/* harmony export */   initViewport: () => (/* binding */ xs),\n/* harmony export */   initWeb: () => (/* binding */ Cs),\n/* harmony export */   invokeCustomMethod: () => (/* binding */ O),\n/* harmony export */   isColorDark: () => (/* binding */ Vt),\n/* harmony export */   isIframe: () => (/* binding */ ht),\n/* harmony export */   isPageReload: () => (/* binding */ Qt),\n/* harmony export */   isRGB: () => (/* binding */ ct),\n/* harmony export */   isRGBShort: () => (/* binding */ Pe),\n/* harmony export */   isSDKError: () => (/* binding */ Ts),\n/* harmony export */   isSDKErrorOfType: () => (/* binding */ Rn),\n/* harmony export */   isSSR: () => (/* binding */ Ss),\n/* harmony export */   isTMA: () => (/* binding */ En),\n/* harmony export */   json: () => (/* binding */ w),\n/* harmony export */   mergeClassNames: () => (/* binding */ gn),\n/* harmony export */   mockTelegramEnv: () => (/* binding */ Pn),\n/* harmony export */   number: () => (/* binding */ x),\n/* harmony export */   off: () => (/* binding */ z),\n/* harmony export */   on: () => (/* binding */ y),\n/* harmony export */   parseInitData: () => (/* binding */ fn),\n/* harmony export */   parseLaunchParams: () => (/* binding */ dt),\n/* harmony export */   parseThemeParams: () => (/* binding */ Xt),\n/* harmony export */   postEvent: () => (/* binding */ B),\n/* harmony export */   request: () => (/* binding */ g),\n/* harmony export */   requestBiometryInfo: () => (/* binding */ ze),\n/* harmony export */   requestThemeParams: () => (/* binding */ mn),\n/* harmony export */   requestViewport: () => (/* binding */ te),\n/* harmony export */   retrieveLaunchParams: () => (/* binding */ nt),\n/* harmony export */   rgb: () => (/* binding */ It),\n/* harmony export */   searchParams: () => (/* binding */ lt),\n/* harmony export */   serializeLaunchParams: () => (/* binding */ Ue),\n/* harmony export */   serializeThemeParams: () => (/* binding */ Jt),\n/* harmony export */   setCSSVar: () => (/* binding */ P),\n/* harmony export */   setDebug: () => (/* binding */ le),\n/* harmony export */   setTargetOrigin: () => (/* binding */ wn),\n/* harmony export */   string: () => (/* binding */ h),\n/* harmony export */   subscribe: () => (/* binding */ pe),\n/* harmony export */   supports: () => (/* binding */ C),\n/* harmony export */   targetOrigin: () => (/* binding */ ke),\n/* harmony export */   toRGB: () => (/* binding */ At),\n/* harmony export */   unsubscribe: () => (/* binding */ Ct),\n/* harmony export */   urlToPath: () => (/* binding */ H),\n/* harmony export */   useBackButton: () => (/* binding */ Ds),\n/* harmony export */   useBackButtonRaw: () => (/* binding */ Ns),\n/* harmony export */   useBiometryManager: () => (/* binding */ Ms),\n/* harmony export */   useBiometryManagerRaw: () => (/* binding */ Bs),\n/* harmony export */   useClosingBehavior: () => (/* binding */ Ls),\n/* harmony export */   useClosingBehaviorRaw: () => (/* binding */ Vs),\n/* harmony export */   useCloudStorage: () => (/* binding */ Us),\n/* harmony export */   useCloudStorageRaw: () => (/* binding */ $s),\n/* harmony export */   useHapticFeedback: () => (/* binding */ Ws),\n/* harmony export */   useHapticFeedbackRaw: () => (/* binding */ Hs),\n/* harmony export */   useInitData: () => (/* binding */ js),\n/* harmony export */   useInitDataRaw: () => (/* binding */ Gs),\n/* harmony export */   useInvoice: () => (/* binding */ Ks),\n/* harmony export */   useInvoiceRaw: () => (/* binding */ zs),\n/* harmony export */   useLaunchParams: () => (/* binding */ Xn),\n/* harmony export */   useMainButton: () => (/* binding */ Fs),\n/* harmony export */   useMainButtonRaw: () => (/* binding */ Js),\n/* harmony export */   useMiniApp: () => (/* binding */ Ys),\n/* harmony export */   useMiniAppRaw: () => (/* binding */ Qs),\n/* harmony export */   usePopup: () => (/* binding */ Xs),\n/* harmony export */   usePopupRaw: () => (/* binding */ Zs),\n/* harmony export */   useQRScanner: () => (/* binding */ en),\n/* harmony export */   useQRScannerRaw: () => (/* binding */ tn),\n/* harmony export */   useSDK: () => (/* binding */ Os),\n/* harmony export */   useSettingsButton: () => (/* binding */ nn),\n/* harmony export */   useSettingsButtonRaw: () => (/* binding */ sn),\n/* harmony export */   useThemeParams: () => (/* binding */ on),\n/* harmony export */   useThemeParamsRaw: () => (/* binding */ rn),\n/* harmony export */   useUtils: () => (/* binding */ cn),\n/* harmony export */   useUtilsRaw: () => (/* binding */ an),\n/* harmony export */   useViewport: () => (/* binding */ pn),\n/* harmony export */   useViewportRaw: () => (/* binding */ hn),\n/* harmony export */   withBackButton: () => (/* binding */ Tn),\n/* harmony export */   withBackButtonRaw: () => (/* binding */ Sn),\n/* harmony export */   withBiometryManager: () => (/* binding */ In),\n/* harmony export */   withBiometryManagerRaw: () => (/* binding */ An),\n/* harmony export */   withClosingBehavior: () => (/* binding */ qn),\n/* harmony export */   withClosingBehaviorRaw: () => (/* binding */ kn),\n/* harmony export */   withCloudStorage: () => (/* binding */ Nn),\n/* harmony export */   withCloudStorageRaw: () => (/* binding */ On),\n/* harmony export */   withHapticFeedback: () => (/* binding */ Bn),\n/* harmony export */   withHapticFeedbackRaw: () => (/* binding */ Dn),\n/* harmony export */   withInitData: () => (/* binding */ Vn),\n/* harmony export */   withInitDataRaw: () => (/* binding */ Mn),\n/* harmony export */   withInvoice: () => (/* binding */ $n),\n/* harmony export */   withInvoiceRaw: () => (/* binding */ Ln),\n/* harmony export */   withMainButton: () => (/* binding */ Hn),\n/* harmony export */   withMainButtonRaw: () => (/* binding */ Un),\n/* harmony export */   withMiniApp: () => (/* binding */ Gn),\n/* harmony export */   withMiniAppRaw: () => (/* binding */ Wn),\n/* harmony export */   withPopup: () => (/* binding */ zn),\n/* harmony export */   withPopupRaw: () => (/* binding */ jn),\n/* harmony export */   withQRScanner: () => (/* binding */ Jn),\n/* harmony export */   withQRScannerRaw: () => (/* binding */ Kn),\n/* harmony export */   withSettingsButton: () => (/* binding */ Qn),\n/* harmony export */   withSettingsButtonRaw: () => (/* binding */ Fn),\n/* harmony export */   withThemeParams: () => (/* binding */ Zn),\n/* harmony export */   withThemeParamsRaw: () => (/* binding */ Yn),\n/* harmony export */   withTimeout: () => (/* binding */ Mt),\n/* harmony export */   withUtils: () => (/* binding */ er),\n/* harmony export */   withUtilsRaw: () => (/* binding */ tr),\n/* harmony export */   withViewport: () => (/* binding */ nr),\n/* harmony export */   withViewportRaw: () => (/* binding */ sr)\n/* harmony export */ });\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-runtime */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react-jsx-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n\n\nvar ce = Object.defineProperty, he = (e, t, s) => t in e ? ce(e, t, { enumerable: !0, configurable: !0, writable: !0, value: s }) : e[t] = s, c = (e, t, s) => he(e, typeof t != \"symbol\" ? t + \"\" : t, s);\nfunction xt(e, t) {\n  let s;\n  const n = () => {\n    s !== void 0 && t && t(s), s = void 0;\n  };\n  return [() => s === void 0 ? s = e(n) : s, n];\n}\nfunction Ct(e) {\n  const t = j(), { count: s } = t;\n  t.unsubscribe(e), s && !t.count && Ae();\n}\nfunction pe(e) {\n  return j().subscribe(e), () => Ct(e);\n}\nclass ue {\n  constructor(t, s = {}) {\n    this.scope = t, this.options = s;\n  }\n  /**\n   * Prints message into a console in case, logger is currently enabled.\n   * @param level - log level.\n   * @param args - arguments.\n   */\n  print(t, ...s) {\n    const n = /* @__PURE__ */ new Date(), r = Intl.DateTimeFormat(\"en-GB\", {\n      hour: \"2-digit\",\n      minute: \"2-digit\",\n      second: \"2-digit\",\n      fractionalSecondDigits: 3,\n      timeZone: \"UTC\"\n    }).format(n), { textColor: i, bgColor: o } = this.options, a = \"font-weight: bold;padding: 0 5px;border-radius:5px\";\n    console[t](\n      `%c${r}%c / %c${this.scope}`,\n      `${a};background-color: lightblue;color:black`,\n      \"\",\n      `${a};${i ? `color:${i};` : \"\"}${o ? `background-color:${o}` : \"\"}`,\n      ...s\n    );\n  }\n  /**\n   * Prints error message into a console.\n   * @param args\n   */\n  error(...t) {\n    this.print(\"error\", ...t);\n  }\n  /**\n   * Prints log message into a console.\n   * @param args\n   */\n  log(...t) {\n    this.print(\"log\", ...t);\n  }\n}\nconst it = new ue(\"SDK\", {\n  bgColor: \"forestgreen\",\n  textColor: \"white\"\n});\nlet X = !1;\nconst vt = ({ name: e, payload: t }) => {\n  it.log(\"Event received:\", t ? { name: e, payload: t } : { name: e });\n};\nfunction le(e) {\n  X !== e && (X = e, e ? pe(vt) : Ct(vt));\n}\nfunction de(...e) {\n  X && it.log(...e);\n}\nclass D {\n  constructor() {\n    c(this, \"listeners\", /* @__PURE__ */ new Map()), c(this, \"listenersCount\", 0), c(this, \"subscribeListeners\", []);\n  }\n  /**\n   * Removes all event listeners.\n   */\n  clear() {\n    this.listeners.clear(), this.subscribeListeners = [];\n  }\n  /**\n   * Returns count of bound listeners.\n   */\n  get count() {\n    return this.listenersCount + this.subscribeListeners.length;\n  }\n  emit(t, ...s) {\n    this.subscribeListeners.forEach((n) => n({\n      event: t,\n      args: s\n    })), (this.listeners.get(t) || []).forEach(([n, r]) => {\n      n(...s), r && this.off(t, n);\n    });\n  }\n  /**\n   * Adds new event listener.\n   * @param event - event name.\n   * @param listener - event listener.\n   * @param once - should listener be called only once.\n   * @returns Function to remove bound event listener.\n   */\n  on(t, s, n) {\n    let r = this.listeners.get(t);\n    return r || this.listeners.set(t, r = []), r.push([s, n]), this.listenersCount += 1, () => this.off(t, s);\n  }\n  /**\n   * Removes event listener. In case, specified listener was bound several times, it removes\n   * only a single one.\n   * @param event - event name.\n   * @param listener - event listener.\n   */\n  off(t, s) {\n    const n = this.listeners.get(t) || [];\n    for (let r = 0; r < n.length; r += 1)\n      if (s === n[r][0]) {\n        n.splice(r, 1), this.listenersCount -= 1;\n        return;\n      }\n  }\n  /**\n   * Adds a new event listener for all events.\n   * @param listener - event listener.\n   * @returns Function to remove event listener.\n   */\n  subscribe(t) {\n    return this.subscribeListeners.push(t), () => this.unsubscribe(t);\n  }\n  /**\n   * Removes global event listener. In case, specified listener was bound several times, it removes\n   * only a single one.\n   * @param listener - event listener.\n   */\n  unsubscribe(t) {\n    for (let s = 0; s < this.subscribeListeners.length; s += 1)\n      if (this.subscribeListeners[s] === t) {\n        this.subscribeListeners.splice(s, 1);\n        return;\n      }\n  }\n}\nfunction tt(e, t, s) {\n  return window.addEventListener(e, t, s), () => window.removeEventListener(e, t, s);\n}\nfunction ot(...e) {\n  let t = !1;\n  const s = [...e];\n  return [\n    (n) => !t && s.push(n),\n    () => {\n      t || (t = !0, s.forEach((n) => n()));\n    },\n    t\n  ];\n}\nclass W extends Error {\n  constructor(t, s, n) {\n    super(s, { cause: n }), this.type = t, Object.setPrototypeOf(this, W.prototype);\n  }\n}\nfunction m(e, t, s) {\n  return new W(e, t, s);\n}\nconst _e = \"ERR_METHOD_UNSUPPORTED\", we = \"ERR_METHOD_PARAMETER_UNSUPPORTED\", ge = \"ERR_UNKNOWN_ENV\", fe = \"ERR_INVOKE_CUSTOM_METHOD_RESPONSE\", me = \"ERR_TIMED_OUT\", be = \"ERR_UNEXPECTED_TYPE\", St = \"ERR_PARSE\", ve = \"ERR_NAVIGATION_LIST_EMPTY\", ye = \"ERR_NAVIGATION_CURSOR_INVALID\", dn = \"ERR_NAVIGATION_ITEM_INVALID\", _n = \"ERR_SSR_INIT\", Ee = \"ERR_INVALID_PATH_BASE\";\nfunction T() {\n  return m(be, \"Value has unexpected type\");\n}\nclass G {\n  constructor(t, s, n) {\n    this.parser = t, this.isOptional = s, this.type = n;\n  }\n  /**\n   * Attempts to parse passed value\n   * @param value - value to parse.\n   * @throws {SDKError} ERR_PARSE\n   * @see ERR_PARSE\n   */\n  parse(t) {\n    if (!(this.isOptional && t === void 0))\n      try {\n        return this.parser(t);\n      } catch (s) {\n        throw m(\n          St,\n          `Unable to parse value${this.type ? ` as ${this.type}` : \"\"}`,\n          s\n        );\n      }\n  }\n  optional() {\n    return this.isOptional = !0, this;\n  }\n}\nfunction A(e, t) {\n  return () => new G(e, !1, t);\n}\nconst E = A((e) => {\n  if (typeof e == \"boolean\")\n    return e;\n  const t = String(e);\n  if (t === \"1\" || t === \"true\")\n    return !0;\n  if (t === \"0\" || t === \"false\")\n    return !1;\n  throw T();\n}, \"boolean\");\nfunction Tt(e, t) {\n  const s = {};\n  for (const n in e) {\n    const r = e[n];\n    if (!r)\n      continue;\n    let i, o;\n    if (typeof r == \"function\" || \"parse\" in r)\n      i = n, o = typeof r == \"function\" ? r : r.parse.bind(r);\n    else {\n      const { type: a } = r;\n      i = r.from || n, o = typeof a == \"function\" ? a : a.parse.bind(a);\n    }\n    try {\n      const a = o(t(i));\n      a !== void 0 && (s[n] = a);\n    } catch (a) {\n      throw m(St, `Unable to parse field \"${n}\"`, a);\n    }\n  }\n  return s;\n}\nfunction at(e) {\n  let t = e;\n  if (typeof t == \"string\" && (t = JSON.parse(t)), typeof t != \"object\" || t === null || Array.isArray(t))\n    throw T();\n  return t;\n}\nfunction w(e, t) {\n  return new G((s) => {\n    const n = at(s);\n    return Tt(e, (r) => n[r]);\n  }, !1, t);\n}\nconst x = A((e) => {\n  if (typeof e == \"number\")\n    return e;\n  if (typeof e == \"string\") {\n    const t = Number(e);\n    if (!Number.isNaN(t))\n      return t;\n  }\n  throw T();\n}, \"number\");\nfunction ct(e) {\n  return /^#[\\da-f]{6}$/i.test(e);\n}\nfunction Pe(e) {\n  return /^#[\\da-f]{3}$/i.test(e);\n}\nfunction At(e) {\n  const t = e.replace(/\\s/g, \"\").toLowerCase();\n  if (ct(t))\n    return t;\n  if (Pe(t)) {\n    let n = \"#\";\n    for (let r = 0; r < 3; r += 1)\n      n += t[1 + r].repeat(2);\n    return n;\n  }\n  const s = t.match(/^rgb\\((\\d{1,3}),(\\d{1,3}),(\\d{1,3})\\)$/) || t.match(/^rgba\\((\\d{1,3}),(\\d{1,3}),(\\d{1,3}),\\d{1,3}\\)$/);\n  if (!s)\n    throw new Error(`Value \"${e}\" does not satisfy any of known RGB formats.`);\n  return s.slice(1).reduce((n, r) => {\n    const i = parseInt(r, 10).toString(16);\n    return n + (i.length === 1 ? \"0\" : \"\") + i;\n  }, \"#\");\n}\nconst h = A((e) => {\n  if (typeof e == \"string\" || typeof e == \"number\")\n    return e.toString();\n  throw T();\n}, \"string\"), It = A((e) => At(h().parse(e)), \"rgb\");\nfunction kt(e) {\n  return w({\n    eventType: h(),\n    eventData: (t) => t\n  }).parse(e);\n}\nfunction Re() {\n  [\"TelegramGameProxy_receiveEvent\", \"TelegramGameProxy\", \"Telegram\"].forEach((e) => {\n    delete window[e];\n  });\n}\nfunction et(e, t) {\n  window.dispatchEvent(new MessageEvent(\"message\", {\n    data: JSON.stringify({ eventType: e, eventData: t }),\n    // We specify window.parent to imitate the case, the parent iframe sent us this event.\n    source: window.parent\n  }));\n}\nfunction xe() {\n  [\n    [\"TelegramGameProxy_receiveEvent\"],\n    // Windows Phone.\n    [\"TelegramGameProxy\", \"receiveEvent\"],\n    // Desktop.\n    [\"Telegram\", \"WebView\", \"receiveEvent\"]\n    // Android and iOS.\n  ].forEach((e) => {\n    let t = window;\n    e.forEach((s, n, r) => {\n      if (n === r.length - 1) {\n        t[s] = et;\n        return;\n      }\n      s in t || (t[s] = {}), t = t[s];\n    });\n  });\n}\nconst Ce = {\n  clipboard_text_received: w({\n    req_id: h(),\n    data: (e) => e === null ? e : h().optional().parse(e)\n  }),\n  custom_method_invoked: w({\n    req_id: h(),\n    result: (e) => e,\n    error: h().optional()\n  }),\n  invoice_closed: w({ slug: h(), status: h() }),\n  phone_requested: w({ status: h() }),\n  popup_closed: {\n    parse(e) {\n      return w({\n        button_id: (t) => t == null ? void 0 : h().parse(t)\n      }).parse(e ?? {});\n    }\n  },\n  qr_text_received: w({ data: h().optional() }),\n  theme_changed: w({\n    theme_params: (e) => {\n      const t = It().optional();\n      return Object.entries(at(e)).reduce((s, [n, r]) => (s[n] = t.parse(r), s), {});\n    }\n  }),\n  viewport_changed: w({\n    height: x(),\n    width: (e) => e == null ? window.innerWidth : x().parse(e),\n    is_state_stable: E(),\n    is_expanded: E()\n  }),\n  write_access_requested: w({ status: h() })\n};\nfunction Se() {\n  const e = new D(), t = new D();\n  t.subscribe((n) => {\n    e.emit(\"event\", { name: n.event, payload: n.args[0] });\n  }), xe();\n  const [, s] = ot(\n    // Don't forget to remove created handlers.\n    Re,\n    // Add \"resize\" event listener to make sure, we always have fresh viewport information.\n    // Desktop version of Telegram is sometimes not sending the viewport_changed\n    // event. For example, when the MainButton is shown. That's why we should\n    // add our own listener to make sure, viewport information is always fresh.\n    // Issue: https://github.com/Telegram-Mini-Apps/tma.js/issues/10\n    tt(\"resize\", () => {\n      t.emit(\"viewport_changed\", {\n        width: window.innerWidth,\n        height: window.innerHeight,\n        is_state_stable: !0,\n        is_expanded: !0\n      });\n    }),\n    // Add listener, which handles events sent from the Telegram web application and also events\n    // generated by the local emitEvent function.\n    tt(\"message\", (n) => {\n      if (n.source !== window.parent)\n        return;\n      let r;\n      try {\n        r = kt(n.data);\n      } catch {\n        return;\n      }\n      const { eventType: i, eventData: o } = r, a = Ce[i];\n      try {\n        const p = a ? a.parse(o) : o;\n        t.emit(...p ? [i, p] : [i]);\n      } catch (p) {\n        it.error(\n          `An error occurred processing the \"${i}\" event from the Telegram application. Please, file an issue here: https://github.com/Telegram-Mini-Apps/tma.js/issues/new/choose`,\n          r,\n          p\n        );\n      }\n    }),\n    // Clear emitters.\n    () => e.clear(),\n    () => t.clear()\n  );\n  return [{\n    on: t.on.bind(t),\n    off: t.off.bind(t),\n    subscribe(n) {\n      return e.on(\"event\", n);\n    },\n    unsubscribe(n) {\n      e.off(\"event\", n);\n    },\n    get count() {\n      return t.count + e.count;\n    }\n  }, s];\n}\nconst [Te, Ae] = xt(\n  (e) => {\n    const [t, s] = Se(), n = t.off.bind(t);\n    return t.off = (r, i) => {\n      const { count: o } = t;\n      n(r, i), o && !t.count && e();\n    }, [t, s];\n  },\n  ([, e]) => e()\n);\nfunction j() {\n  return Te()[0];\n}\nfunction z(e, t) {\n  j().off(e, t);\n}\nfunction y(e, t, s) {\n  return j().on(e, t, s);\n}\nfunction V(e) {\n  return typeof e == \"object\" && e !== null && !Array.isArray(e);\n}\nfunction Ie(e, t) {\n  const s = e.split(\".\"), n = t.split(\".\"), r = Math.max(s.length, n.length);\n  for (let i = 0; i < r; i += 1) {\n    const o = parseInt(s[i] || \"0\", 10), a = parseInt(n[i] || \"0\", 10);\n    if (o !== a)\n      return o > a ? 1 : -1;\n  }\n  return 0;\n}\nfunction v(e, t) {\n  return Ie(e, t) <= 0;\n}\nfunction C(e, t, s) {\n  if (typeof s == \"string\") {\n    if (e === \"web_app_open_link\" && t === \"try_instant_view\")\n      return v(\"6.4\", s);\n    if (e === \"web_app_set_header_color\" && t === \"color\")\n      return v(\"6.9\", s);\n  }\n  switch (e) {\n    case \"web_app_open_tg_link\":\n    case \"web_app_open_invoice\":\n    case \"web_app_setup_back_button\":\n    case \"web_app_set_background_color\":\n    case \"web_app_set_header_color\":\n    case \"web_app_trigger_haptic_feedback\":\n      return v(\"6.1\", t);\n    case \"web_app_open_popup\":\n      return v(\"6.2\", t);\n    case \"web_app_close_scan_qr_popup\":\n    case \"web_app_open_scan_qr_popup\":\n    case \"web_app_read_text_from_clipboard\":\n      return v(\"6.4\", t);\n    case \"web_app_switch_inline_query\":\n      return v(\"6.7\", t);\n    case \"web_app_invoke_custom_method\":\n    case \"web_app_request_write_access\":\n    case \"web_app_request_phone\":\n      return v(\"6.9\", t);\n    case \"web_app_setup_settings_button\":\n      return v(\"6.10\", t);\n    case \"web_app_biometry_get_info\":\n    case \"web_app_biometry_open_settings\":\n    case \"web_app_biometry_request_access\":\n    case \"web_app_biometry_request_auth\":\n    case \"web_app_biometry_update_token\":\n      return v(\"7.2\", t);\n    default:\n      return [\n        \"iframe_ready\",\n        \"iframe_will_reload\",\n        \"web_app_close\",\n        \"web_app_data_send\",\n        \"web_app_expand\",\n        \"web_app_open_link\",\n        \"web_app_ready\",\n        \"web_app_request_theme\",\n        \"web_app_request_viewport\",\n        \"web_app_setup_main_button\",\n        \"web_app_setup_closing_behavior\"\n      ].includes(e);\n  }\n}\nfunction qt(e) {\n  return \"external\" in e && V(e.external) && \"notify\" in e.external && typeof e.external.notify == \"function\";\n}\nfunction Ot(e) {\n  return \"TelegramWebviewProxy\" in e && V(e.TelegramWebviewProxy) && \"postEvent\" in e.TelegramWebviewProxy && typeof e.TelegramWebviewProxy.postEvent == \"function\";\n}\nfunction ht() {\n  try {\n    return window.self !== window.top;\n  } catch {\n    return !0;\n  }\n}\nlet Nt = \"https://web.telegram.org\";\nfunction wn(e) {\n  Nt = e;\n}\nfunction ke() {\n  return Nt;\n}\nfunction B(e, t, s) {\n  let n = {}, r;\n  t === void 0 && s === void 0 ? n = {} : t !== void 0 && s !== void 0 ? (n = s, r = t) : t !== void 0 && (\"targetOrigin\" in t ? n = t : r = t);\n  const { targetOrigin: i = ke() } = n;\n  if (de(\"Posting event:\", r ? { event: e, data: r } : { event: e }), ht()) {\n    window.parent.postMessage(JSON.stringify({ eventType: e, eventData: r }), i);\n    return;\n  }\n  if (qt(window)) {\n    window.external.notify(JSON.stringify({ eventType: e, eventData: r }));\n    return;\n  }\n  if (Ot(window)) {\n    window.TelegramWebviewProxy.postEvent(e, JSON.stringify(r));\n    return;\n  }\n  throw m(\n    ge,\n    \"Unable to determine current environment and possible way to send event. You are probably trying to use Mini Apps method outside of Telegram application environment.\"\n  );\n}\nfunction qe(e) {\n  return (t, s) => {\n    if (!C(t, e))\n      throw m(_e, `Method \"${t}\" is unsupported in Mini Apps version ${e}`);\n    if (V(s)) {\n      let n;\n      if (t === \"web_app_open_link\" && \"try_instant_view\" in s ? n = \"try_instant_view\" : t === \"web_app_set_header_color\" && \"color\" in s && (n = \"color\"), n && !C(t, n, e))\n        throw m(\n          we,\n          `Parameter \"${n}\" of \"${t}\" method is unsupported in Mini Apps version ${e}`\n        );\n    }\n    return B(t, s);\n  };\n}\nfunction Dt(e) {\n  return ({ req_id: t }) => t === e;\n}\nfunction Bt(e) {\n  return m(me, `Timeout reached: ${e}ms`);\n}\nfunction Mt(e, t) {\n  return Promise.race([\n    typeof e == \"function\" ? e() : e,\n    new Promise((s, n) => {\n      setTimeout(() => {\n        n(Bt(t));\n      }, t);\n    })\n  ]);\n}\nasync function g(e) {\n  let t;\n  const s = new Promise((a) => {\n    t = a;\n  }), { event: n, capture: r, timeout: i } = e, [, o] = ot(\n    ...(Array.isArray(n) ? n : [n]).map(\n      (a) => y(a, (p) => (!r || r(p)) && t(p))\n    )\n  );\n  try {\n    return (e.postEvent || B)(e.method, e.params), await (i ? Mt(s, i) : s);\n  } finally {\n    o();\n  }\n}\nasync function O(e, t, s, n = {}) {\n  const {\n    result: r,\n    error: i\n  } = await g({\n    ...n,\n    method: \"web_app_invoke_custom_method\",\n    event: \"custom_method_invoked\",\n    params: {\n      method: e,\n      params: t,\n      req_id: s\n    },\n    capture: Dt(s)\n  });\n  if (i)\n    throw m(fe, i);\n  return r;\n}\nfunction st(...e) {\n  return e.map((t) => {\n    if (typeof t == \"string\")\n      return t;\n    if (V(t))\n      return st(Object.entries(t).map((s) => s[1] && s[0]));\n    if (Array.isArray(t))\n      return st(...t);\n  }).filter(Boolean).join(\" \");\n}\nfunction gn(...e) {\n  return e.reduce((t, s) => (V(s) && Object.entries(s).forEach(([n, r]) => {\n    const i = st(t[n], r);\n    i.length && (t[n] = i);\n  }), t), {});\n}\nfunction Vt(e) {\n  const t = At(e);\n  return Math.sqrt(\n    [0.299, 0.587, 0.114].reduce((s, n, r) => {\n      const i = parseInt(t.slice(1 + r * 2, 1 + (r + 1) * 2), 16);\n      return s + i * i * n;\n    }, 0)\n  ) < 120;\n}\nclass Oe {\n  constructor(t) {\n    c(this, \"ee\", new D()), c(this, \"on\", this.ee.on.bind(this.ee)), c(this, \"off\", this.ee.off.bind(this.ee)), this.state = t;\n  }\n  /**\n   * Clones current state and returns its copy.\n   */\n  clone() {\n    return { ...this.state };\n  }\n  set(t, s) {\n    Object.entries(typeof t == \"string\" ? { [t]: s } : t).reduce((n, [r, i]) => this.state[r] === i || i === void 0 ? n : (this.state[r] = i, this.ee.emit(`change:${r}`, i), !0), !1) && this.ee.emit(\"change\", this.state);\n  }\n  /**\n   * Returns value by specified key.\n   * @param key - state key.\n   */\n  get(t) {\n    return this.state[t];\n  }\n}\nclass pt {\n  constructor(t) {\n    c(this, \"state\"), c(this, \"get\"), c(this, \"set\"), c(this, \"clone\"), this.state = new Oe(t), this.set = this.state.set.bind(this.state), this.get = this.state.get.bind(this.state), this.clone = this.state.clone.bind(this.state);\n  }\n}\nfunction Lt(e, t) {\n  return (s) => C(t[s], e);\n}\nclass ut extends pt {\n  constructor(t, s, n) {\n    super(t), c(this, \"supports\"), this.supports = Lt(s, n);\n  }\n}\nclass Ne extends ut {\n  constructor(t, s, n) {\n    super({ isVisible: t }, s, {\n      show: \"web_app_setup_back_button\",\n      hide: \"web_app_setup_back_button\"\n    }), c(this, \"on\", (r, i) => r === \"click\" ? y(\"back_button_pressed\", i) : this.state.on(r, i)), c(this, \"off\", (r, i) => r === \"click\" ? z(\"back_button_pressed\", i) : this.state.off(r, i)), this.postEvent = n;\n  }\n  set isVisible(t) {\n    this.set(\"isVisible\", t), this.postEvent(\"web_app_setup_back_button\", { is_visible: t });\n  }\n  /**\n   * True if BackButton is currently visible.\n   */\n  get isVisible() {\n    return this.get(\"isVisible\");\n  }\n  /**\n   * Hides the BackButton.\n   */\n  hide() {\n    this.isVisible = !1;\n  }\n  /**\n   * Shows the BackButton.\n   */\n  show() {\n    this.isVisible = !0;\n  }\n}\nconst $t = A((e) => e instanceof Date ? e : new Date(x().parse(e) * 1e3), \"Date\");\nfunction lt(e, t) {\n  return new G((s) => {\n    if (typeof s != \"string\" && !(s instanceof URLSearchParams))\n      throw T();\n    const n = typeof s == \"string\" ? new URLSearchParams(s) : s;\n    return Tt(e, (r) => {\n      const i = n.get(r);\n      return i === null ? void 0 : i;\n    });\n  }, !1, t);\n}\nconst De = w({\n  id: x(),\n  type: h(),\n  title: h(),\n  photoUrl: {\n    type: h().optional(),\n    from: \"photo_url\"\n  },\n  username: h().optional()\n}, \"Chat\").optional(), yt = w({\n  addedToAttachmentMenu: {\n    type: E().optional(),\n    from: \"added_to_attachment_menu\"\n  },\n  allowsWriteToPm: {\n    type: E().optional(),\n    from: \"allows_write_to_pm\"\n  },\n  firstName: {\n    type: h(),\n    from: \"first_name\"\n  },\n  id: x(),\n  isBot: {\n    type: E().optional(),\n    from: \"is_bot\"\n  },\n  isPremium: {\n    type: E().optional(),\n    from: \"is_premium\"\n  },\n  languageCode: {\n    type: h().optional(),\n    from: \"language_code\"\n  },\n  lastName: {\n    type: h().optional(),\n    from: \"last_name\"\n  },\n  photoUrl: {\n    type: h().optional(),\n    from: \"photo_url\"\n  },\n  username: h().optional()\n}, \"User\").optional();\nfunction Ut() {\n  return lt({\n    authDate: {\n      type: $t(),\n      from: \"auth_date\"\n    },\n    canSendAfter: {\n      type: x().optional(),\n      from: \"can_send_after\"\n    },\n    chat: De,\n    chatInstance: {\n      type: h().optional(),\n      from: \"chat_instance\"\n    },\n    chatType: {\n      type: h().optional(),\n      from: \"chat_type\"\n    },\n    hash: h(),\n    queryId: {\n      type: h().optional(),\n      from: \"query_id\"\n    },\n    receiver: yt,\n    startParam: {\n      type: h().optional(),\n      from: \"start_param\"\n    },\n    user: yt\n  }, \"InitData\");\n}\nfunction Be(e) {\n  return e.replace(/_[a-z]/g, (t) => t[1].toUpperCase());\n}\nfunction Me(e) {\n  return e.replace(/[A-Z]/g, (t) => `_${t.toLowerCase()}`);\n}\nconst Ht = A(\n  (e) => {\n    const t = It().optional();\n    return Object.entries(at(e)).reduce((s, [n, r]) => (s[Be(n)] = t.parse(r), s), {});\n  },\n  \"ThemeParams\"\n);\nfunction dt(e) {\n  return lt({\n    botInline: {\n      type: E().optional(),\n      from: \"tgWebAppBotInline\"\n    },\n    initData: {\n      type: Ut().optional(),\n      from: \"tgWebAppData\"\n    },\n    initDataRaw: {\n      type: h().optional(),\n      from: \"tgWebAppData\"\n    },\n    platform: {\n      type: h(),\n      from: \"tgWebAppPlatform\"\n    },\n    showSettings: {\n      type: E().optional(),\n      from: \"tgWebAppShowSettings\"\n    },\n    startParam: {\n      type: h().optional(),\n      from: \"tgWebAppStartParam\"\n    },\n    themeParams: {\n      type: Ht(),\n      from: \"tgWebAppThemeParams\"\n    },\n    version: {\n      type: h(),\n      from: \"tgWebAppVersion\"\n    }\n  }).parse(e);\n}\nfunction Wt(e) {\n  return dt(\n    e.replace(/^[^?#]*[?#]/, \"\").replace(/[?#]/g, \"&\")\n  );\n}\nfunction Ve() {\n  return Wt(window.location.href);\n}\nfunction Gt() {\n  return performance.getEntriesByType(\"navigation\")[0];\n}\nfunction Le() {\n  const e = Gt();\n  if (!e)\n    throw new Error(\"Unable to get first navigation entry.\");\n  return Wt(e.name);\n}\nfunction jt(e) {\n  return `tma.js/${e.replace(/[A-Z]/g, (t) => `-${t.toLowerCase()}`)}`;\n}\nfunction zt(e, t) {\n  sessionStorage.setItem(jt(e), JSON.stringify(t));\n}\nfunction Kt(e) {\n  const t = sessionStorage.getItem(jt(e));\n  try {\n    return t ? JSON.parse(t) : void 0;\n  } catch {\n  }\n}\nfunction $e() {\n  return dt(Kt(\"launchParams\") || \"\");\n}\nfunction Jt(e) {\n  return JSON.stringify(\n    Object.fromEntries(\n      Object.entries(e).map(([t, s]) => [Me(t), s])\n    )\n  );\n}\nfunction Ue(e) {\n  const {\n    initDataRaw: t,\n    themeParams: s,\n    platform: n,\n    version: r,\n    showSettings: i,\n    startParam: o,\n    botInline: a\n  } = e, p = new URLSearchParams();\n  return p.set(\"tgWebAppPlatform\", n), p.set(\"tgWebAppThemeParams\", Jt(s)), p.set(\"tgWebAppVersion\", r), t && p.set(\"tgWebAppData\", t), o && p.set(\"tgWebAppStartParam\", o), typeof i == \"boolean\" && p.set(\"tgWebAppShowSettings\", i ? \"1\" : \"0\"), typeof a == \"boolean\" && p.set(\"tgWebAppBotInline\", a ? \"1\" : \"0\"), p.toString();\n}\nfunction Ft(e) {\n  zt(\"launchParams\", Ue(e));\n}\nfunction nt() {\n  for (const e of [\n    // Try to retrieve launch parameters from the current location. This method can return\n    // nothing in case, location was changed and then page was reloaded.\n    Ve,\n    // Then, try using the lower level API - window.performance.\n    Le,\n    // Finally, try to extract launch parameters from the session storage.\n    $e\n  ])\n    try {\n      const t = e();\n      return Ft(t), t;\n    } catch {\n    }\n  throw new Error(\"Unable to retrieve launch parameters from any known source.\");\n}\nfunction Qt() {\n  const e = Gt();\n  return !!(e && e.type === \"reload\");\n}\nfunction He() {\n  let e = 0;\n  return () => (e += 1).toString();\n}\nconst [We] = xt(He);\nfunction l(e, t) {\n  return () => {\n    const s = nt(), n = {\n      ...s,\n      postEvent: qe(s.version),\n      createRequestId: We()\n    };\n    if (typeof e == \"function\")\n      return e(n);\n    const [r, i, o] = ot(), a = t({\n      ...n,\n      // State should only be passed only in case, current page was reloaded. If we don't add\n      // this check, state restoration will work improperly in the web version of Telegram,\n      // when we are always working in the same \"session\" (tab).\n      state: Qt() ? Kt(e) : void 0,\n      addCleanup: r\n    }), p = (u) => (o || r(\n      u.on(\"change\", (S) => {\n        zt(e, S);\n      })\n    ), u);\n    return [\n      a instanceof Promise ? a.then(p) : p(a),\n      i\n    ];\n  };\n}\nconst Ge = l(\"backButton\", ({\n  postEvent: e,\n  version: t,\n  state: s = { isVisible: !1 }\n}) => new Ne(s.isVisible, t, e));\nclass L extends ut {\n  constructor() {\n    super(...arguments), c(this, \"on\", this.state.on.bind(this.state)), c(this, \"off\", this.state.off.bind(this.state));\n  }\n}\nfunction Yt(e) {\n  const t = e.available ? e : {\n    available: !1,\n    device_id: \"\",\n    token_saved: !1,\n    access_requested: !1,\n    access_granted: !1,\n    type: \"\"\n  };\n  return {\n    available: !0,\n    type: t.type,\n    deviceId: t.device_id,\n    tokenSaved: t.token_saved,\n    accessRequested: t.access_requested,\n    accessGranted: t.access_granted\n  };\n}\nclass je extends L {\n  constructor({ postEvent: t, version: s, ...n }) {\n    super(n, s, {\n      auth: \"web_app_biometry_request_auth\",\n      openSettings: \"web_app_biometry_open_settings\",\n      requestAccess: \"web_app_biometry_request_access\",\n      updateToken: \"web_app_biometry_update_token\"\n    }), c(this, \"postEvent\"), c(this, \"authPromise\"), c(this, \"accessPromise\"), this.postEvent = t;\n  }\n  /**\n   * Shows whether biometry is available.\n   */\n  get available() {\n    return this.get(\"available\");\n  }\n  /**\n   * Shows whether permission to use biometrics has been granted.\n   */\n  get accessGranted() {\n    return this.get(\"accessGranted\");\n  }\n  /**\n   * Shows whether if permission to use biometrics has been requested.\n   */\n  get accessRequested() {\n    return this.get(\"accessRequested\");\n  }\n  /**\n   * Authenticates the user using biometrics.\n   * @param options - method options.\n   * @since 7.2\n   * @returns Token from the local secure storage, if authentication was successful.\n   */\n  async authenticate({\n    reason: t,\n    ...s\n  }) {\n    return this.authPromise || (this.authPromise = g({\n      ...s,\n      method: \"web_app_biometry_request_auth\",\n      event: \"biometry_auth_requested\",\n      postEvent: this.postEvent,\n      params: {\n        // TODO: Check if reason is empty works fine.\n        reason: (t || \"\").trim()\n      }\n    }).then(({ token: n }) => n).finally(() => this.authPromise = void 0)), this.authPromise;\n  }\n  /**\n   * A unique device identifier that can be used to match the token to the device.\n   */\n  get deviceId() {\n    return this.get(\"deviceId\");\n  }\n  /**\n   * Opens the biometric access settings for bots. Useful when you need to request biometrics\n   * access to users who haven't granted it yet.\n   *\n   * _Note that this method can be called only in response to user interaction with the Mini App\n   * interface (e.g. a click inside the Mini App or on the main button)_.\n   * @since 7.2\n   */\n  openSettings() {\n    this.postEvent(\"web_app_biometry_open_settings\");\n  }\n  /**\n   * Requests permission to use biometrics.\n   * @since 7.2\n   * @returns Promise with true, if access was granted.\n   */\n  requestAccess({ reason: t, ...s } = {}) {\n    return this.accessPromise || (this.accessPromise = g({\n      ...s,\n      postEvent: this.postEvent,\n      method: \"web_app_biometry_request_access\",\n      event: \"biometry_info_received\",\n      params: { reason: t || \"\" }\n    }).then((n) => {\n      const r = Yt(n);\n      return this.set(r), r.accessGranted;\n    }).finally(() => this.accessPromise = void 0)), this.accessPromise;\n  }\n  /**\n   * The type of biometrics currently available on the device.\n   */\n  get biometryType() {\n    return this.get(\"biometryType\");\n  }\n  /**\n   * Shows whether token was saved previously in the local secure storage.\n   */\n  get tokenSaved() {\n    return this.get(\"tokenSaved\");\n  }\n  /**\n   * Updates the biometric token in a secure storage on the device.\n   * @returns Promise with `true`, if token was updated.\n   */\n  async updateToken({ token: t, ...s } = {}) {\n    return [\"removed\", \"updated\"].includes(\n      (await g({\n        ...s,\n        postEvent: this.postEvent,\n        method: \"web_app_biometry_update_token\",\n        event: \"biometry_token_updated\",\n        params: { token: t || \"\" }\n      })).status\n    );\n  }\n}\nasync function ze(e) {\n  return Yt(\n    await g({\n      ...e || {},\n      method: \"web_app_biometry_get_info\",\n      event: \"biometry_info_received\"\n    })\n  );\n}\nconst Ke = l(\n  \"biometryManager\",\n  async ({ postEvent: e, version: t, state: s }) => new je({\n    ...s || C(\"web_app_biometry_get_info\", t) ? s || await ze({ timeout: 1e3 }) : {\n      available: !1,\n      accessGranted: !1,\n      accessRequested: !1,\n      tokenSaved: !1,\n      deviceId: \"\"\n    },\n    version: t,\n    postEvent: e\n  })\n);\nclass _t extends pt {\n  constructor() {\n    super(...arguments), c(this, \"on\", this.state.on.bind(this.state)), c(this, \"off\", this.state.off.bind(this.state));\n  }\n}\nclass Je extends _t {\n  constructor(t, s) {\n    super({ isConfirmationNeeded: t }), this.postEvent = s;\n  }\n  set isConfirmationNeeded(t) {\n    this.set(\"isConfirmationNeeded\", t), this.postEvent(\"web_app_setup_closing_behavior\", { need_confirmation: t });\n  }\n  /**\n   * True, if the confirmation dialog should be shown while the user is trying to close\n   * the Mini App.\n   */\n  get isConfirmationNeeded() {\n    return this.get(\"isConfirmationNeeded\");\n  }\n  /**\n   * Disables the confirmation dialog when closing the Mini App.\n   */\n  disableConfirmation() {\n    this.isConfirmationNeeded = !1;\n  }\n  /**\n   * Enables the confirmation dialog when closing the Mini App.\n   */\n  enableConfirmation() {\n    this.isConfirmationNeeded = !0;\n  }\n}\nconst Fe = l(\n  \"closingBehavior\",\n  ({\n    postEvent: e,\n    state: t = { isConfirmationNeeded: !1 }\n  }) => new Je(t.isConfirmationNeeded, e)\n);\nclass wt {\n  constructor(t, s) {\n    c(this, \"supports\"), this.supports = Lt(t, s);\n  }\n}\nfunction Qe(e) {\n  if (Array.isArray(e))\n    return e;\n  if (typeof e == \"string\")\n    try {\n      const t = JSON.parse(e);\n      if (Array.isArray(t))\n        return t;\n    } catch {\n    }\n  throw T();\n}\nclass Ye extends G {\n  constructor(t, s, n) {\n    super(Qe, s, n), c(this, \"itemParser\"), this.itemParser = typeof t == \"function\" ? t : t.parse.bind(t);\n  }\n  /**\n   * Attempts to parse passed value\n   * @param value - value to parse.\n   * @throws {SDKError} ERR_PARSE\n   * @see ERR_PARSE\n   */\n  parse(t) {\n    const s = super.parse(t);\n    return s === void 0 ? s : s.map(this.itemParser);\n  }\n  of(t) {\n    return this.itemParser = typeof t == \"function\" ? t : t.parse.bind(t), this;\n  }\n}\nfunction Ze(e) {\n  return new Ye((t) => t, !1, e);\n}\nfunction Et(e, t) {\n  return Object.fromEntries(e.map((s) => [s, t]));\n}\nclass Xe extends wt {\n  constructor(t, s, n) {\n    super(t, {\n      delete: \"web_app_invoke_custom_method\",\n      get: \"web_app_invoke_custom_method\",\n      getKeys: \"web_app_invoke_custom_method\",\n      set: \"web_app_invoke_custom_method\"\n    }), this.createRequestId = s, this.postEvent = n;\n  }\n  /**\n   * Deletes specified key or keys from the cloud storage.\n   * @param keyOrKeys - key or keys to delete.\n   * @param options - request execution options.\n   */\n  async delete(t, s = {}) {\n    const n = Array.isArray(t) ? t : [t];\n    n.length && await O(\n      \"deleteStorageValues\",\n      { keys: n },\n      this.createRequestId(),\n      { ...s, postEvent: this.postEvent }\n    );\n  }\n  /**\n   * Returns list of all keys presented in the cloud storage.\n   * @param options - request execution options.\n   */\n  async getKeys(t = {}) {\n    return Ze().of(h()).parse(\n      await O(\n        \"getStorageKeys\",\n        {},\n        this.createRequestId(),\n        { ...t, postEvent: this.postEvent }\n      )\n    );\n  }\n  async get(t, s = {}) {\n    const n = Array.isArray(t) ? t : [t];\n    if (!n.length)\n      return Et(n, \"\");\n    const r = await O(\n      \"getStorageValues\",\n      { keys: n },\n      this.createRequestId(),\n      { ...s, postEvent: this.postEvent }\n    ), i = w(Et(n, h()), \"CloudStorageData\").parse(r);\n    return Array.isArray(t) ? i : i[t];\n  }\n  /**\n   * Saves specified value by key.\n   * @param key - storage key.\n   * @param value - storage value.\n   * @param options - request execution options.\n   */\n  async set(t, s, n = {}) {\n    await O(\n      \"saveStorageValue\",\n      { key: t, value: s },\n      this.createRequestId(),\n      { ...n, postEvent: this.postEvent }\n    );\n  }\n}\nconst ts = l(\n  ({ createRequestId: e, postEvent: t, version: s }) => new Xe(s, e, t)\n);\nclass es extends wt {\n  constructor(t, s) {\n    super(t, {\n      impactOccurred: \"web_app_trigger_haptic_feedback\",\n      notificationOccurred: \"web_app_trigger_haptic_feedback\",\n      selectionChanged: \"web_app_trigger_haptic_feedback\"\n    }), this.postEvent = s;\n  }\n  /**\n   * A method tells that an impact occurred. The Telegram app may play the\n   * appropriate haptics based on style value passed.\n   * @param style - impact style.\n   */\n  impactOccurred(t) {\n    this.postEvent(\"web_app_trigger_haptic_feedback\", {\n      type: \"impact\",\n      impact_style: t\n    });\n  }\n  /**\n   * A method tells that a task or action has succeeded, failed, or produced\n   * a warning. The Telegram app may play the appropriate haptics based on\n   * type value passed.\n   * @param type - notification type.\n   */\n  notificationOccurred(t) {\n    this.postEvent(\"web_app_trigger_haptic_feedback\", {\n      type: \"notification\",\n      notification_type: t\n    });\n  }\n  /**\n   * A method tells that the user has changed a selection. The Telegram app\n   * may play the appropriate haptics.\n   *\n   * Do not use this feedback when the user makes or confirms a selection;\n   * use it only when the selection changes.\n   */\n  selectionChanged() {\n    this.postEvent(\"web_app_trigger_haptic_feedback\", { type: \"selection_change\" });\n  }\n}\nconst ss = l(\n  ({ version: e, postEvent: t }) => new es(e, t)\n);\nclass ns {\n  constructor(t) {\n    this.initData = t;\n  }\n  /**\n   * @see InitDataParsed.authDate\n   */\n  get authDate() {\n    return this.initData.authDate;\n  }\n  /**\n   * @see InitDataParsed.canSendAfter\n   */\n  get canSendAfter() {\n    return this.initData.canSendAfter;\n  }\n  /**\n   * Date after which it is allowed to call\n   * the [answerWebAppQuery](https://core.telegram.org/bots/api#answerwebappquery) method.\n   */\n  get canSendAfterDate() {\n    const { canSendAfter: t } = this;\n    return t ? new Date(this.authDate.getTime() + t * 1e3) : void 0;\n  }\n  /**\n   * @see InitDataParsed.chat\n   */\n  get chat() {\n    return this.initData.chat;\n  }\n  /**\n   * @see InitDataParsed.chatType\n   */\n  get chatType() {\n    return this.initData.chatType;\n  }\n  /**\n   * @see InitDataParsed.chatInstance\n   */\n  get chatInstance() {\n    return this.initData.chatInstance;\n  }\n  /**\n   * @see InitDataParsed.hash\n   */\n  get hash() {\n    return this.initData.hash;\n  }\n  /**\n   * @see InitDataParsed.queryId\n   */\n  get queryId() {\n    return this.initData.queryId;\n  }\n  /**\n   * @see InitDataParsed.receiver\n   */\n  get receiver() {\n    return this.initData.receiver;\n  }\n  /**\n   * @see InitDataParsed.startParam\n   */\n  get startParam() {\n    return this.initData.startParam;\n  }\n  /**\n   * @see InitDataParsed.user\n   */\n  get user() {\n    return this.initData.user;\n  }\n}\nconst rs = l(\n  ({ initData: e }) => e ? new ns(e) : void 0\n);\nfunction fn(e) {\n  return Ut().parse(e);\n}\nclass is extends L {\n  constructor(t, s, n) {\n    super({ isOpened: t }, s, { open: \"web_app_open_invoice\" }), this.postEvent = n;\n  }\n  set isOpened(t) {\n    this.set(\"isOpened\", t);\n  }\n  /**\n   * True if invoice is currently opened.\n   */\n  get isOpened() {\n    return this.get(\"isOpened\");\n  }\n  async open(t, s) {\n    if (this.isOpened)\n      throw new Error(\"Invoice is already opened\");\n    let n;\n    if (!s)\n      n = t;\n    else {\n      const { hostname: r, pathname: i } = new URL(t, window.location.href);\n      if (r !== \"t.me\")\n        throw new Error(`Incorrect hostname: ${r}`);\n      const o = i.match(/^\\/(\\$|invoice\\/)([A-Za-z0-9\\-_=]+)$/);\n      if (!o)\n        throw new Error('Link pathname has incorrect format. Expected to receive \"/invoice/{slug}\" or \"/${slug}\"');\n      [, , n] = o;\n    }\n    this.isOpened = !0;\n    try {\n      return (await g({\n        method: \"web_app_open_invoice\",\n        event: \"invoice_closed\",\n        params: { slug: n },\n        postEvent: this.postEvent,\n        capture(r) {\n          return n === r.slug;\n        }\n      })).status;\n    } finally {\n      this.isOpened = !1;\n    }\n  }\n}\nconst os = l(\n  ({ version: e, postEvent: t }) => new is(!1, e, t)\n);\nclass as extends pt {\n  constructor({ postEvent: t, ...s }) {\n    super(s), c(this, \"postEvent\"), c(this, \"on\", (n, r) => n === \"click\" ? y(\"main_button_pressed\", r) : this.state.on(n, r)), c(this, \"off\", (n, r) => n === \"click\" ? z(\"main_button_pressed\", r) : this.state.off(n, r)), this.postEvent = t;\n  }\n  /**\n   * The MainButton background color.\n   */\n  get bgColor() {\n    return this.get(\"bgColor\");\n  }\n  /**\n   * Sends current local state to the Telegram application.\n   */\n  commit() {\n    this.text !== \"\" && this.postEvent(\"web_app_setup_main_button\", {\n      is_visible: this.isVisible,\n      is_active: this.isEnabled,\n      is_progress_visible: this.isLoaderVisible,\n      text: this.text,\n      color: this.bgColor,\n      text_color: this.textColor\n    });\n  }\n  /**\n   * Disables the MainButton.\n   * @see Does not work on Android: https://github.com/Telegram-Mini-Apps/issues/issues/1\n   */\n  disable() {\n    return this.isEnabled = !1, this;\n  }\n  /**\n   * Enables the MainButton.\n   */\n  enable() {\n    return this.isEnabled = !0, this;\n  }\n  /**\n   * Hides the MainButton.\n   */\n  hide() {\n    return this.isVisible = !1, this;\n  }\n  /**\n   * Hides the MainButton loading indicator.\n   */\n  hideLoader() {\n    return this.isLoaderVisible = !1, this;\n  }\n  set isEnabled(t) {\n    this.setParams({ isEnabled: t });\n  }\n  /**\n   * True if the MainButton is enabled.\n   */\n  get isEnabled() {\n    return this.get(\"isEnabled\");\n  }\n  set isLoaderVisible(t) {\n    this.setParams({ isLoaderVisible: t });\n  }\n  /**\n   * True if the MainButton loader is visible.\n   */\n  get isLoaderVisible() {\n    return this.get(\"isLoaderVisible\");\n  }\n  set isVisible(t) {\n    this.setParams({ isVisible: t });\n  }\n  /**\n   * True if the MainButton is visible.\n   */\n  get isVisible() {\n    return this.get(\"isVisible\");\n  }\n  /**\n   * Shows the MainButton.\n   *\n   * Note that opening the Mini App from the attachment menu hides the main button until the\n   * user interacts with the Mini App interface.\n   */\n  show() {\n    return this.isVisible = !0, this;\n  }\n  /**\n   * Shows a loading indicator on the Main Button.\n   */\n  showLoader() {\n    return this.isLoaderVisible = !0, this;\n  }\n  /**\n   * Sets a new MainButton text. Minimal length for the text is 1 symbol, and maximum is 64 symbols.\n   * @param text - a new text.\n   */\n  setText(t) {\n    return this.setParams({ text: t });\n  }\n  /**\n   * Sets a new Main Button text color.\n   * @param textColor - new text color.\n   */\n  setTextColor(t) {\n    return this.setParams({ textColor: t });\n  }\n  /**\n   * Updates current Main Button color.\n   * @param bgColor - color to set.\n   */\n  setBgColor(t) {\n    return this.setParams({ bgColor: t });\n  }\n  /**\n   * Allows setting multiple Main Button parameters.\n   * @param params - Main Button parameters.\n   */\n  setParams(t) {\n    return this.set(t), this.commit(), this;\n  }\n  /**\n   * The MainButton text.\n   */\n  get text() {\n    return this.get(\"text\");\n  }\n  /**\n   * The MainButton text color.\n   */\n  get textColor() {\n    return this.get(\"textColor\");\n  }\n}\nconst cs = l(\n  \"mainButton\",\n  ({\n    postEvent: e,\n    themeParams: t,\n    state: s = {\n      isVisible: !1,\n      isEnabled: !1,\n      text: \"\",\n      isLoaderVisible: !1,\n      textColor: t.buttonTextColor || \"#ffffff\",\n      bgColor: t.buttonColor || \"#000000\"\n    }\n  }) => new as({ ...s, postEvent: e })\n);\nfunction hs() {\n  return lt({\n    contact: w({\n      userId: {\n        type: x(),\n        from: \"user_id\"\n      },\n      phoneNumber: {\n        type: h(),\n        from: \"phone_number\"\n      },\n      firstName: {\n        type: h(),\n        from: \"first_name\"\n      },\n      lastName: {\n        type: h().optional(),\n        from: \"last_name\"\n      }\n    }),\n    authDate: {\n      type: $t(),\n      from: \"auth_date\"\n    },\n    hash: h()\n  }, \"RequestedContact\");\n}\nfunction Zt(e, t) {\n  return (s) => {\n    const [n, r] = t[s];\n    return C(n, r, e);\n  };\n}\nfunction ps(e) {\n  return new Promise((t) => {\n    setTimeout(t, e);\n  });\n}\nclass us extends L {\n  constructor({ postEvent: t, createRequestId: s, version: n, botInline: r, ...i }) {\n    super(i, n, {\n      requestPhoneAccess: \"web_app_request_phone\",\n      requestWriteAccess: \"web_app_request_write_access\",\n      switchInlineQuery: \"web_app_switch_inline_query\",\n      setHeaderColor: \"web_app_set_header_color\",\n      setBackgroundColor: \"web_app_set_background_color\"\n    }), c(this, \"botInline\"), c(this, \"postEvent\"), c(this, \"createRequestId\"), c(this, \"requestPhoneAccessPromise\"), c(this, \"requestWriteAccessPromise\"), c(this, \"supportsParam\"), this.createRequestId = s, this.postEvent = t, this.botInline = r;\n    const o = this.supports.bind(this);\n    this.supports = (a) => o(a) ? a !== \"switchInlineQuery\" || r : !1, this.supportsParam = Zt(n, {\n      \"setHeaderColor.color\": [\"web_app_set_header_color\", \"color\"]\n    });\n  }\n  /**\n   * Attempts to get requested contact.\n   * @param timeout - request timeout.\n   */\n  async getRequestedContact({\n    timeout: t = 1e4\n  } = {}) {\n    return hs().parse(\n      await O(\n        \"getRequestedContact\",\n        {},\n        this.createRequestId(),\n        { postEvent: this.postEvent, timeout: t }\n      )\n    );\n  }\n  /**\n   * The Mini App background color.\n   * @example \"#ffaabb\"\n   */\n  get bgColor() {\n    return this.get(\"bgColor\");\n  }\n  /**\n   * Closes the Mini App.\n   */\n  close() {\n    this.postEvent(\"web_app_close\");\n  }\n  /**\n   * The Mini App header color.\n   * @example \"#ffaabb\"\n   * @example \"bg_color\"\n   */\n  get headerColor() {\n    return this.get(\"headerColor\");\n  }\n  /**\n   * True if the Mini App is currently launched in bot inline mode.\n   */\n  get isBotInline() {\n    return this.botInline;\n  }\n  /**\n   * True if current Mini App background color is recognized as dark.\n   */\n  get isDark() {\n    return Vt(this.bgColor);\n  }\n  /**\n   * Informs the Telegram app that the Mini App is ready to be displayed.\n   *\n   * It is recommended to call this method as early as possible, as soon as all essential\n   * interface elements loaded. Once this method called, the loading placeholder is hidden\n   * and the Mini App shown.\n   *\n   * If the method not called, the placeholder will be hidden only when the page fully loaded.\n   */\n  ready() {\n    this.postEvent(\"web_app_ready\");\n  }\n  /**\n   * Requests current user contact information. In contrary to requestPhoneAccess, this method\n   * returns promise with contact information that rejects in case, user denied access, or request\n   * failed.\n   * @param options - additional options.\n   */\n  async requestContact({ timeout: t = 5e3 } = {}) {\n    try {\n      return await this.getRequestedContact();\n    } catch {\n    }\n    if (await this.requestPhoneAccess() !== \"sent\")\n      throw new Error(\"Access denied.\");\n    const s = Date.now() + t;\n    let n = 50;\n    return Mt(async () => {\n      for (; Date.now() < s; ) {\n        try {\n          return await this.getRequestedContact();\n        } catch {\n        }\n        await ps(n), n += 50;\n      }\n      throw Bt(t);\n    }, t);\n  }\n  /**\n   * Requests current user phone access. Method returns promise, which resolves\n   * status of the request. In case, user accepted the request, Mini App bot will receive\n   * the according notification.\n   *\n   * To obtain the retrieved information instead, utilize the `requestContact` method.\n   * @param options - additional options.\n   * @see requestContact\n   */\n  async requestPhoneAccess(t = {}) {\n    return this.requestPhoneAccessPromise || (this.requestPhoneAccessPromise = g({\n      ...t,\n      method: \"web_app_request_phone\",\n      event: \"phone_requested\",\n      postEvent: this.postEvent\n    }).then(({ status: s }) => s).finally(() => this.requestPhoneAccessPromise = void 0)), this.requestPhoneAccessPromise;\n  }\n  /**\n   * Requests write message access to current user.\n   * @param options - additional options.\n   */\n  async requestWriteAccess(t = {}) {\n    return this.requestWriteAccessPromise || (this.requestWriteAccessPromise = g({\n      ...t,\n      method: \"web_app_request_write_access\",\n      event: \"write_access_requested\",\n      postEvent: this.postEvent\n    }).then(({ status: s }) => s).finally(() => this.requestWriteAccessPromise = void 0)), this.requestWriteAccessPromise;\n  }\n  /**\n   * A method used to send data to the bot. When this method called, a service message sent to\n   * the bot containing the data of the length up to 4096 bytes, and the Mini App closed. See the\n   * field `web_app_data` in the class [Message](https://core.telegram.org/bots/api#message).\n   *\n   * This method is only available for Mini Apps launched via a Keyboard button.\n   * @param data - data to send to bot.\n   * @throws {Error} data has incorrect size.\n   */\n  sendData(t) {\n    const { size: s } = new Blob([t]);\n    if (!s || s > 4096)\n      throw new Error(`Passed data has incorrect size: ${s}`);\n    this.postEvent(\"web_app_data_send\", { data: t });\n  }\n  /**\n   * Updates current Mini App header color.\n   *\n   * @see No effect on desktop: https://github.com/Telegram-Mini-Apps/tma.js/issues/9\n   * @see Works incorrectly in Android: https://github.com/Telegram-Mini-Apps/tma.js/issues/8\n   * @param color - color key or RGB color.\n   */\n  setHeaderColor(t) {\n    this.postEvent(\"web_app_set_header_color\", ct(t) ? { color: t } : { color_key: t }), this.set(\"headerColor\", t);\n  }\n  /**\n   * Updates current Mini App background color.\n   *\n   * @see No effect on desktop: https://github.com/Telegram-Mini-Apps/tma.js/issues/9\n   * @see Works incorrectly in Android: https://github.com/Telegram-Mini-Apps/tma.js/issues/8\n   * @param color - RGB color.\n   */\n  setBgColor(t) {\n    this.postEvent(\"web_app_set_background_color\", { color: t }), this.set(\"bgColor\", t);\n  }\n  /**\n   * Inserts the bot's username and the specified inline query in the current chat's input field.\n   * Query may be empty, in which case only the bot's username will be inserted. The client prompts\n   * the user to choose a specific chat, then opens that chat and inserts the bot's username and\n   * the specified inline query in the input field.\n   * @param text - text which should be inserted in the input after the current bot name. Max\n   * length is 256 symbols.\n   * @param chatTypes - List of chat types which could be chosen to send the message. Could be\n   * empty list.\n   */\n  switchInlineQuery(t, s = []) {\n    if (!this.supports(\"switchInlineQuery\") && !this.isBotInline)\n      throw new Error(\"Method is unsupported because Mini App should be launched in inline mode.\");\n    this.postEvent(\"web_app_switch_inline_query\", { query: t, chat_types: s });\n  }\n}\nconst ls = l(\n  \"miniApp\",\n  ({\n    themeParams: e,\n    botInline: t = !1,\n    state: s = {\n      bgColor: e.bgColor || \"#ffffff\",\n      headerColor: e.headerBgColor || \"#000000\"\n    },\n    ...n\n  }) => new us({ ...n, ...s, botInline: t })\n);\nfunction ds(e) {\n  const t = e.message.trim(), s = (e.title || \"\").trim(), n = e.buttons || [];\n  let r;\n  if (s.length > 64)\n    throw new Error(`Title has incorrect size: ${s.length}`);\n  if (!t.length || t.length > 256)\n    throw new Error(`Message has incorrect size: ${t.length}`);\n  if (n.length > 3)\n    throw new Error(`Buttons have incorrect size: ${n.length}`);\n  return n.length ? r = n.map((i) => {\n    const { id: o = \"\" } = i;\n    if (o.length > 64)\n      throw new Error(`Button ID has incorrect size: ${o}`);\n    if (!i.type || i.type === \"default\" || i.type === \"destructive\") {\n      const a = i.text.trim();\n      if (!a.length || a.length > 64) {\n        const p = i.type || \"default\";\n        throw new Error(`Button text with type \"${p}\" has incorrect size: ${i.text.length}`);\n      }\n      return { ...i, text: a, id: o };\n    }\n    return { ...i, id: o };\n  }) : r = [{ type: \"close\", id: \"\" }], { title: s, message: t, buttons: r };\n}\nclass _s extends L {\n  constructor(t, s, n) {\n    super({ isOpened: t }, s, { open: \"web_app_open_popup\" }), this.postEvent = n;\n  }\n  set isOpened(t) {\n    this.set(\"isOpened\", t);\n  }\n  /**\n   * True if the Popup is opened.\n   */\n  get isOpened() {\n    return this.get(\"isOpened\");\n  }\n  /**\n   * A method that shows a native popup described by the `params` argument.\n   * Promise will be resolved when popup is closed. Resolved value will have\n   * an identifier of pressed button.\n   *\n   * In case, user clicked outside the popup or clicked top right popup close\n   * button, null will be returned.\n   *\n   * @param options - popup parameters.\n   * @throws {Error} Popup is already opened.\n   */\n  async open(t) {\n    if (this.isOpened)\n      throw new Error(\"Popup is already opened.\");\n    this.isOpened = !0;\n    try {\n      const { button_id: s = null } = await g({\n        event: \"popup_closed\",\n        method: \"web_app_open_popup\",\n        postEvent: this.postEvent,\n        params: ds(t)\n      });\n      return s;\n    } finally {\n      this.isOpened = !1;\n    }\n  }\n}\nconst ws = l(\n  ({ postEvent: e, version: t }) => new _s(!1, t, e)\n);\nclass gs extends L {\n  constructor(t, s, n) {\n    super({ isOpened: t }, s, {\n      close: \"web_app_close_scan_qr_popup\",\n      open: \"web_app_open_scan_qr_popup\"\n    }), this.postEvent = n;\n  }\n  /**\n   * Closes scanner.\n   */\n  close() {\n    this.postEvent(\"web_app_close_scan_qr_popup\"), this.isOpened = !1;\n  }\n  set isOpened(t) {\n    this.set(\"isOpened\", t);\n  }\n  /**\n   * Returns true in case, QR scanner is currently opened.\n   */\n  get isOpened() {\n    return this.get(\"isOpened\");\n  }\n  async open(t) {\n    if (this.isOpened)\n      throw new Error(\"QR scanner is already opened.\");\n    const { text: s, capture: n } = (typeof t == \"string\" ? { text: t } : t) || {};\n    this.isOpened = !0;\n    try {\n      const r = (await g({\n        method: \"web_app_open_scan_qr_popup\",\n        event: [\"qr_text_received\", \"scan_qr_popup_closed\"],\n        postEvent: this.postEvent,\n        params: { text: s },\n        capture(i) {\n          return i.event === \"scan_qr_popup_closed\" || !n || n(i.payload);\n        }\n      }) || {}).data || null;\n      return r && this.close(), r;\n    } catch (r) {\n      throw this.isOpened = !1, r;\n    }\n  }\n}\nconst fs = l(\n  ({ version: e, postEvent: t }) => new gs(!1, e, t)\n);\nclass ms extends ut {\n  constructor(t, s, n) {\n    super({ isVisible: t }, s, {\n      show: \"web_app_setup_settings_button\",\n      hide: \"web_app_setup_settings_button\"\n    }), c(this, \"on\", (r, i) => r === \"click\" ? y(\"settings_button_pressed\", i) : this.state.on(r, i)), c(this, \"off\", (r, i) => r === \"click\" ? z(\"settings_button_pressed\", i) : this.state.off(r, i)), this.postEvent = n;\n  }\n  set isVisible(t) {\n    this.set(\"isVisible\", t), this.postEvent(\"web_app_setup_settings_button\", { is_visible: t });\n  }\n  /**\n   * True if the SettingsButton is visible.\n   */\n  get isVisible() {\n    return this.get(\"isVisible\");\n  }\n  /**\n   * Hides the SettingsButton.\n   */\n  hide() {\n    this.isVisible = !1;\n  }\n  /**\n   * Shows the SettingsButton.\n   */\n  show() {\n    this.isVisible = !0;\n  }\n}\nconst bs = l(\n  \"settingsButton\",\n  ({\n    version: e,\n    postEvent: t,\n    state: s = { isVisible: !1 }\n  }) => new ms(s.isVisible, e, t)\n);\nfunction Xt(e) {\n  return Ht().parse(e);\n}\nclass vs extends _t {\n  /**\n   * @since v6.10\n   */\n  get accentTextColor() {\n    return this.get(\"accentTextColor\");\n  }\n  get bgColor() {\n    return this.get(\"bgColor\");\n  }\n  get buttonColor() {\n    return this.get(\"buttonColor\");\n  }\n  get buttonTextColor() {\n    return this.get(\"buttonTextColor\");\n  }\n  get destructiveTextColor() {\n    return this.get(\"destructiveTextColor\");\n  }\n  /**\n   * Returns the copy of the internal state of the current component instance.\n   */\n  getState() {\n    return this.clone();\n  }\n  /**\n   * @since v6.10\n   */\n  get headerBgColor() {\n    return this.get(\"headerBgColor\");\n  }\n  get hintColor() {\n    return this.get(\"hintColor\");\n  }\n  /**\n   * @returns True in case, current color scheme is recognized as dark. This\n   * value is calculated according to theme bg color.\n   */\n  get isDark() {\n    return !this.bgColor || Vt(this.bgColor);\n  }\n  get linkColor() {\n    return this.get(\"linkColor\");\n  }\n  get secondaryBgColor() {\n    return this.get(\"secondaryBgColor\");\n  }\n  /**\n   * @since v6.10\n   */\n  get sectionBgColor() {\n    return this.get(\"sectionBgColor\");\n  }\n  /**\n   * @since v6.10\n   */\n  get sectionHeaderTextColor() {\n    return this.get(\"sectionHeaderTextColor\");\n  }\n  /**\n   * Starts listening to the external theme changes and applies them.\n   * @returns Function to stop listening.\n   */\n  listen() {\n    return y(\"theme_changed\", (t) => {\n      this.set(Xt(t.theme_params));\n    });\n  }\n  /**\n   * @since v6.10\n   */\n  get subtitleTextColor() {\n    return this.get(\"subtitleTextColor\");\n  }\n  get textColor() {\n    return this.get(\"textColor\");\n  }\n}\nconst ys = l(\n  \"themeParams\",\n  ({ themeParams: e, state: t = e, addCleanup: s }) => {\n    const n = new vs(t);\n    return s(n.listen()), n;\n  }\n);\nfunction mn(e = {}) {\n  return g({\n    ...e,\n    method: \"web_app_request_theme\",\n    event: \"theme_changed\"\n  }).then(Xt);\n}\nclass Es extends wt {\n  constructor(t, s, n) {\n    super(t, { readTextFromClipboard: \"web_app_read_text_from_clipboard\" }), c(this, \"supportsParam\"), this.version = t, this.createRequestId = s, this.postEvent = n, this.supportsParam = Zt(t, {\n      \"openLink.tryInstantView\": [\"web_app_open_link\", \"try_instant_view\"]\n    });\n  }\n  /**\n   * Opens a link in an external browser. The Mini App will not be closed.\n   *\n   * Note that this method can be called only in response to the user\n   * interaction with the Mini App interface (e.g. click inside the Mini App\n   * or on the main button).\n   * @param url - URL to be opened.\n   * @param tryInstantView\n   */\n  openLink(t, s) {\n    const n = new URL(t, window.location.href).toString();\n    if (!C(\"web_app_open_link\", this.version)) {\n      window.open(n, \"_blank\");\n      return;\n    }\n    this.postEvent(\"web_app_open_link\", {\n      url: n,\n      ...typeof s == \"boolean\" ? { try_instant_view: s } : {}\n    });\n  }\n  /**\n   * Opens a Telegram link inside Telegram app. The Mini App will be closed. It expects passing\n   * link in full format, with hostname \"t.me\".\n   * @param url - URL to be opened.\n   * @throws {Error} URL has not allowed hostname.\n   */\n  openTelegramLink(t) {\n    const { hostname: s, pathname: n, search: r } = new URL(t, \"https://t.me\");\n    if (s !== \"t.me\")\n      throw new Error(`URL has not allowed hostname: ${s}. Only \"t.me\" is allowed`);\n    if (!C(\"web_app_open_tg_link\", this.version)) {\n      window.location.href = t;\n      return;\n    }\n    this.postEvent(\"web_app_open_tg_link\", { path_full: n + r });\n  }\n  /**\n   * Reads text from clipboard and returns string or null. null is returned\n   * in cases:\n   * - Value in clipboard is not text\n   * - Access to clipboard is not allowed\n   */\n  async readTextFromClipboard() {\n    const t = this.createRequestId(), {\n      data: s = null\n    } = await g({\n      method: \"web_app_read_text_from_clipboard\",\n      event: \"clipboard_text_received\",\n      postEvent: this.postEvent,\n      params: { req_id: t },\n      capture: Dt(t)\n    });\n    return s;\n  }\n  /**\n   * Shares specified URL with the passed to the chats, selected by user. After being called,\n   * it closes the mini application.\n   *\n   * This method uses Telegram's Share Links.\n   * @param url - URL to share.\n   * @param text - text to append after the URL.\n   * @see https://core.telegram.org/api/links#share-links\n   * @see https://core.telegram.org/widgets/share#custom-buttons\n   */\n  shareURL(t, s) {\n    this.openTelegramLink(\n      \"https://t.me/share/url?\" + new URLSearchParams({ url: t, text: s || \"\" }).toString()\n    );\n  }\n}\nconst Ps = l(\n  ({ version: e, postEvent: t, createRequestId: s }) => new Es(e, s, t)\n);\nasync function te(e = {}) {\n  const {\n    is_expanded: t,\n    is_state_stable: s,\n    ...n\n  } = await g({\n    ...e,\n    method: \"web_app_request_viewport\",\n    event: \"viewport_changed\"\n  });\n  return { ...n, isExpanded: t, isStateStable: s };\n}\nfunction q(e) {\n  return e < 0 ? 0 : e;\n}\nclass Rs extends _t {\n  constructor({ postEvent: t, stableHeight: s, height: n, width: r, isExpanded: i }) {\n    super({\n      height: q(n),\n      isExpanded: i,\n      stableHeight: q(s),\n      width: q(r)\n    }), c(this, \"postEvent\"), this.postEvent = t;\n  }\n  /**\n   * Requests viewport information from the Telegram application and updates current Viewport\n   * instance.\n   * @param options - options to request fresh data.\n   */\n  async sync(t) {\n    const { isStateStable: s, ...n } = await te(t);\n    this.set({\n      ...n,\n      stableHeight: s ? n.height : this.get(\"stableHeight\")\n    });\n  }\n  /**\n   * The current height of the **visible area** of the Mini App.\n   *\n   * The application can display just the top part of the Mini App, with its lower part remaining\n   * outside the screen area. From this position, the user can \"pull\" the Mini App to its\n   * maximum height, while the bot can do the same by calling `expand` method. As the position of\n   * the Mini App changes, the current height value of the visible area will be updated  in real\n   * time.\n   *\n   * Please note that the refresh rate of this value is not sufficient to smoothly follow the\n   * lower border of the window. It should not be used to pin interface elements to the bottom\n   * of the visible area. It's more appropriate to use the value of the `stableHeight`\n   * field for this purpose.\n   *\n   * @see stableHeight\n   */\n  get height() {\n    return this.get(\"height\");\n  }\n  /**\n   * The height of the visible area of the Mini App in its last stable state.\n   *\n   * The application can display just the top part of the Mini App, with its lower part remaining\n   * outside the screen area. From this position, the user can \"pull\" the Mini App to its\n   * maximum height, while the application can do the same by calling `expand` method.\n   *\n   * Unlike the value of `height`, the value of `stableHeight` does not change as the position\n   * of the Mini App changes with user gestures or during animations. The value of `stableHeight`\n   * will be updated after all gestures and animations are completed and\n   * the Mini App reaches its final size.\n   *\n   * @see height\n   */\n  get stableHeight() {\n    return this.get(\"stableHeight\");\n  }\n  /**\n   * Starts listening to viewport changes and applies them.\n   * @returns Function to stop listening.\n   */\n  listen() {\n    return y(\"viewport_changed\", (t) => {\n      const {\n        height: s,\n        width: n,\n        is_expanded: r,\n        is_state_stable: i\n      } = t, o = q(s);\n      this.set({\n        height: o,\n        isExpanded: r,\n        width: q(n),\n        ...i ? { stableHeight: o } : {}\n      });\n    });\n  }\n  /**\n   * True if the Mini App is expanded to the maximum available height. Otherwise, if\n   * the Mini App occupies part of the screen and can be expanded to the full height using\n   * `expand` method.\n   * @see expand\n   */\n  get isExpanded() {\n    return this.get(\"isExpanded\");\n  }\n  /**\n   * Current visible area width.\n   */\n  get width() {\n    return this.get(\"width\");\n  }\n  /**\n   * A method that expands the Mini App to the maximum available height. To find out if the Mini\n   * App is expanded to the maximum height, refer to the value of the `isExpanded`.\n   * @see isExpanded\n   */\n  expand() {\n    this.postEvent(\"web_app_expand\"), this.set(\"isExpanded\", !0);\n  }\n  /**\n   * True if the current viewport height is stable and is not going to change in the next moment.\n   */\n  get isStable() {\n    return this.stableHeight === this.height;\n  }\n}\nconst xs = l(\n  \"viewport\",\n  async ({ state: e, platform: t, postEvent: s, addCleanup: n }) => {\n    let r = !1, i = 0, o = 0, a = 0;\n    if (e)\n      r = e.isExpanded, i = e.height, o = e.width, a = e.stableHeight;\n    else if ([\"macos\", \"tdesktop\", \"unigram\", \"webk\", \"weba\", \"web\"].includes(t))\n      r = !0, i = window.innerHeight, o = window.innerWidth, a = window.innerHeight;\n    else {\n      const u = await te({ timeout: 1e3, postEvent: s });\n      r = u.isExpanded, i = u.height, o = u.width, a = u.isStateStable ? i : 0;\n    }\n    const p = new Rs({\n      postEvent: s,\n      height: i,\n      width: o,\n      stableHeight: a,\n      isExpanded: r\n    });\n    return n(p.listen()), p;\n  }\n);\nfunction P(e, t) {\n  document.documentElement.style.setProperty(e, t);\n}\nfunction bn(e, t, s) {\n  s || (s = (a) => `--tg-${a}-color`);\n  const n = s(\"header\"), r = s(\"bg\"), i = () => {\n    const { headerColor: a } = e;\n    if (ct(a))\n      P(n, a);\n    else {\n      const { bgColor: p, secondaryBgColor: u } = t;\n      a === \"bg_color\" && p ? P(n, p) : a === \"secondary_bg_color\" && u && P(n, u);\n    }\n    P(r, e.bgColor);\n  }, o = [\n    t.on(\"change\", i),\n    e.on(\"change\", i)\n  ];\n  return i(), () => o.forEach((a) => a());\n}\nfunction vn(e, t) {\n  t || (t = (n) => `--tg-theme-${n.replace(/[A-Z]/g, (r) => `-${r.toLowerCase()}`)}`);\n  const s = () => {\n    Object.entries(e.getState()).forEach(([n, r]) => {\n      r && P(t(n), r);\n    });\n  };\n  return s(), e.on(\"change\", s);\n}\nfunction yn(e, t) {\n  t || (t = (u) => `--tg-viewport-${u}`);\n  const [\n    s,\n    n,\n    r\n  ] = [\"height\", \"width\", \"stable-height\"].map((u) => t(u)), i = () => P(s, `${e.height}px`), o = () => P(n, `${e.width}px`), a = () => P(r, `${e.stableHeight}px`), p = [\n    e.on(\"change:height\", i),\n    e.on(\"change:width\", o),\n    e.on(\"change:stableHeight\", a)\n  ];\n  return i(), o(), a(), () => p.forEach((u) => u());\n}\nfunction Cs(e = !0) {\n  const t = [\n    y(\"reload_iframe\", () => {\n      B(\"iframe_will_reload\"), window.location.reload();\n    })\n  ], s = () => t.forEach((n) => n());\n  if (e) {\n    const n = document.createElement(\"style\");\n    n.id = \"telegram-custom-styles\", document.head.appendChild(n), t.push(\n      y(\"set_custom_style\", (r) => {\n        n.innerHTML = r;\n      }),\n      () => document.head.removeChild(n)\n    );\n  }\n  return B(\"iframe_ready\", { reload_supported: !0 }), s;\n}\nfunction Ss() {\n  return typeof window > \"u\";\n}\nasync function En() {\n  if (Ot(window))\n    return !0;\n  try {\n    return await g({ method: \"web_app_request_theme\", event: \"theme_changed\", timeout: 100 }), !0;\n  } catch {\n    return !1;\n  }\n}\nfunction Pn(e) {\n  const t = typeof e == \"string\" ? dt(e) : e;\n  Ft(t);\n  function s(r) {\n    if (typeof r == \"string\")\n      try {\n        const { eventType: i } = kt(r);\n        i === \"web_app_request_theme\" && et(\"theme_changed\", {\n          theme_params: JSON.parse(Jt(t.themeParams))\n        }), i === \"web_app_request_viewport\" && et(\"viewport_changed\", {\n          width: window.innerWidth,\n          height: window.innerHeight,\n          is_state_stable: !0,\n          is_expanded: !0\n        });\n      } catch {\n      }\n  }\n  if (ht()) {\n    const r = window.parent.postMessage.bind(window.parent);\n    window.parent.postMessage = (i) => {\n      s(i), r(i);\n    };\n    return;\n  }\n  if (qt(window)) {\n    const r = window.external.notify.bind(window.external);\n    window.external.notify = (i) => {\n      s(i), r(i);\n    };\n    return;\n  }\n  const n = window.TelegramWebviewProxy;\n  window.TelegramWebviewProxy = {\n    ...n || {},\n    postEvent(...r) {\n      s(JSON.stringify({ eventType: r[0], eventData: r[1] })), n && n.postEvent(...r);\n    }\n  };\n}\nfunction Ts(e) {\n  return e instanceof W;\n}\nfunction Rn(e, t) {\n  return Ts(e) && e.type === t;\n}\nfunction J(e, t) {\n  let s, n, r;\n  return typeof e == \"string\" ? s = e : (s = e.pathname === void 0 ? t : e.pathname, n = e.params, r = e.id), Object.freeze({\n    id: r || (Math.random() * 2 ** 14 | 0).toString(16),\n    pathname: s,\n    params: n\n  });\n}\nclass As {\n  constructor(t, s, n = B) {\n    if (c(this, \"history\"), c(this, \"ee\", new D()), c(this, \"attached\", !1), c(this, \"back\", () => this.go(-1)), c(this, \"on\", this.ee.on.bind(this.ee)), c(this, \"off\", this.ee.off.bind(this.ee)), this._index = s, this.postEvent = n, t.length === 0)\n      throw m(ve, \"History should not be empty.\");\n    if (s < 0 || s >= t.length)\n      throw m(\n        ye,\n        \"Index should not be zero and higher or equal than history size.\"\n      );\n    this.history = t.map((r) => J(r, \"\"));\n  }\n  /**\n   * Allows this navigator to control the `BackButton` visibility state. It also tracks the\n   * `BackButton` clicks and calls the `back` method.\n   */\n  attach() {\n    this.attached || (this.attached = !0, this.sync(), y(\"back_button_pressed\", this.back));\n  }\n  /**\n   * Currently active history item.\n   */\n  get current() {\n    return this.history[this.index];\n  }\n  /**\n   * Prevents current navigator from controlling the BackButton visibility state.\n   */\n  detach() {\n    this.attached = !1, z(\"back_button_pressed\", this.back);\n  }\n  /**\n   * Goes to the next history item.\n   */\n  forward() {\n    this.go(1);\n  }\n  /**\n   * Changes currently active history item index by the specified delta. This method doesn't\n   * change index in case, the updated index points to the non-existing history item. This behavior\n   * is preserved until the `fit` argument is specified.\n   * @param delta - index delta.\n   * @param fit - cuts the delta argument to fit the bounds `[0, history.length - 1]`.\n   */\n  go(t, s) {\n    const n = this.index + t, r = Math.min(\n      Math.max(0, n),\n      this.history.length - 1\n    );\n    (n === r || s) && this.replaceAndMove(r, this.history[r]);\n  }\n  /**\n   * Goes to the specified index. Method does nothing in case, passed index is out of bounds.\n   *\n   * If \"fit\" option was specified and index is out of bounds, it will be cut to the nearest\n   * bound.\n   * @param index - target index.\n   * @param fit - cuts the index argument to fit the bounds `[0, history.length - 1]`.\n   */\n  goTo(t, s) {\n    this.go(t - this.index, s);\n  }\n  /**\n   * True if navigator has items before the current item.\n   */\n  get hasPrev() {\n    return this.index > 0;\n  }\n  /**\n   * True if navigator has items after the current item.\n   */\n  get hasNext() {\n    return this.index !== this.history.length - 1;\n  }\n  /**\n   * Currently active history item index.\n   */\n  get index() {\n    return this._index;\n  }\n  /**\n   * Adds a new history item removing all after the current one.\n   * @param item - item to add.\n   */\n  push(t) {\n    this.hasNext && this.history.splice(this.index + 1), this.replaceAndMove(this.index + 1, J(t, this.current.pathname));\n  }\n  /**\n   * Replaces the current history item.\n   * @param item - item to replace the current item with.\n   */\n  replace(t) {\n    this.replaceAndMove(this.index, J(t, this.current.pathname));\n  }\n  /**\n   * Sets history item by the specified index.\n   * @param index - history item index to replace.\n   * @param historyItem - history item to set.\n   */\n  replaceAndMove(t, s) {\n    const n = t - this.index;\n    if (!n && this.current === s)\n      return;\n    const r = this.current;\n    if (this.index !== t) {\n      const i = this._index;\n      this._index = t, this.attached && i > 0 != t > 0 && this.sync();\n    }\n    this.history[t] = s, this.ee.emit(\"change\", {\n      navigator: this,\n      from: r,\n      to: this.current,\n      delta: n\n    });\n  }\n  /**\n   * Actualizes the `BackButton` visibility state.\n   */\n  sync() {\n    this.postEvent(\"web_app_setup_back_button\", { is_visible: !!this.index });\n  }\n}\nfunction F({\n  params: e,\n  ...t\n}) {\n  return { ...e || { hash: \"\", search: \"\" }, ...t };\n}\nfunction M(e, t) {\n  return e.startsWith(t) ? e : `${t}${e}`;\n}\nfunction U(e) {\n  return new URL(\n    typeof e == \"string\" ? e : `${e.pathname || \"\"}${M(e.search || \"\", \"?\")}${M(e.hash || \"\", \"#\")}`,\n    \"http://a\"\n  );\n}\nfunction H(e) {\n  const t = typeof e == \"string\" ? e.startsWith(\"/\") : !!(e.pathname && e.pathname.startsWith(\"/\")), s = U(e);\n  return `${t ? s.pathname : s.pathname.slice(1)}${s.search}${s.hash}`;\n}\nfunction Q(e, t, s) {\n  let n, r;\n  typeof e == \"string\" ? n = e : (n = H(e), s = e.state, r = e.id);\n  const { pathname: i, search: o, hash: a } = new URL(n, `http://a${M(t, \"/\")}`);\n  return { id: r, pathname: i, params: { hash: a, search: o, state: s } };\n}\nasync function N(e) {\n  return e === 0 ? !0 : Promise.race([\n    new Promise((t) => {\n      const s = tt(\"popstate\", () => {\n        s(), t(!0);\n      });\n      window.history.go(e);\n    }),\n    // Usually, it takes about 1ms to emit this event, but we use some buffer.\n    new Promise((t) => {\n      setTimeout(t, 50, !1);\n    })\n  ]);\n}\nasync function Is() {\n  if (window.history.length <= 1 || (window.history.pushState(null, \"\"), await N(1 - window.history.length)))\n    return;\n  let e = await N(-1);\n  for (; e; )\n    e = await N(-1);\n}\nfunction ee(e) {\n  return U(e).pathname;\n}\nconst Pt = 0, Y = 1, Z = 2;\nclass se {\n  constructor(t, s, { postEvent: n, hashMode: r = \"classic\", base: i } = {}) {\n    c(this, \"navigator\"), c(this, \"ee\", new D()), c(this, \"hashMode\"), c(this, \"base\"), c(this, \"attached\", !1), c(this, \"onPopState\", ({ state: o }) => {\n      if (o === null)\n        return this.push(this.parsePath(window.location.href));\n      o === Pt ? window.history.forward() : o === Y && this.back(), o === Z && this.forward();\n    }), c(this, \"onNavigatorChange\", async ({\n      to: o,\n      from: a,\n      delta: p\n    }) => {\n      this.attached && await this.syncHistory(), this.ee.emit(\"change\", {\n        delta: p,\n        from: F(a),\n        to: F(o),\n        navigator: this\n      });\n    }), c(this, \"on\", this.ee.on.bind(this.ee)), c(this, \"off\", this.ee.off.bind(this.ee)), this.navigator = new As(\n      t.map((o) => Q(o, \"/\")),\n      s,\n      n\n    ), this.navigator.on(\"change\", (o) => {\n      this.onNavigatorChange(o);\n    }), this.hashMode = r, this.base = ee(i || \"\");\n  }\n  /**\n   * Attaches current navigator to the browser history allowing navigator to manipulate it.\n   */\n  async attach() {\n    this.attached || (this.attached = !0, this.navigator.attach(), window.addEventListener(\"popstate\", this.onPopState), await this.syncHistory());\n  }\n  /**\n   * Goes back in history by 1.\n   */\n  back() {\n    this.navigator.back();\n  }\n  /**\n   * Detaches current navigator from the browser history.\n   */\n  detach() {\n    this.attached = !1, this.navigator.detach(), window.removeEventListener(\"popstate\", this.onPopState);\n  }\n  /**\n   * Goes forward in history.\n   */\n  forward() {\n    return this.navigator.forward();\n  }\n  /**\n   * Current history cursor.\n   */\n  get index() {\n    return this.navigator.index;\n  }\n  /**\n   * Current history item identifier.\n   */\n  get id() {\n    return this.navigator.current.id;\n  }\n  /**\n   * Changes currently active history item index by the specified delta. This method doesn't\n   * change index in case, the updated index points to the non-existing history item. This behavior\n   * is preserved until the `fit` argument is specified.\n   * @param delta - index delta.\n   * @param fit - cuts the delta argument to fit the bounds `[0, history.length - 1]`.\n   */\n  go(t, s) {\n    return this.navigator.go(t, s);\n  }\n  /**\n   * Goes to the specified index. Method does nothing in case, passed index is out of bounds.\n   *\n   * If \"fit\" option was specified and index is out of bounds, it will be cut to the nearest\n   * bound.\n   * @param index - target index.\n   * @param fit - cuts the index argument to fit the bounds `[0, history.length - 1]`.\n   */\n  goTo(t, s) {\n    this.navigator.goTo(t, s);\n  }\n  /**\n   * Current history item hash.\n   * @see URL.hash\n   * @example\n   * \"\", \"#my-hash\"\n   */\n  get hash() {\n    return (this.navigator.current.params || {}).hash || \"\";\n  }\n  /**\n   * True if navigator has items before the current item.\n   */\n  get hasPrev() {\n    return this.navigator.hasPrev;\n  }\n  /**\n   * True if navigator has items after the current item.\n   */\n  get hasNext() {\n    return this.navigator.hasNext;\n  }\n  /**\n   * Navigation history.\n   */\n  get history() {\n    return this.navigator.history.map(F);\n  }\n  /**\n   * Path, including pathname, search and hash.\n   * @example Pathname only.\n   * \"/pathname\"\n   * @example Pathname + search.\n   * \"/pathname?search\"\n   * @example Pathname + hash.\n   * \"/pathname#hash\"\n   * @example Pathname + search + hash.\n   * \"/pathname?search#hash\"\n   */\n  get path() {\n    return H(this);\n  }\n  /**\n   * Current pathname. Always starts with the slash.\n   * @see URL.pathname\n   * @example\n   * \"/\", \"/abc\"\n   */\n  get pathname() {\n    return this.navigator.current.pathname;\n  }\n  /**\n   * Depending on the current navigation type, parses incoming path and returns it presented as\n   * an object. In other words, this method parses the passed path and returns object, describing\n   * how the navigator \"sees\" it.\n   *\n   * @example Hash mode is omitted.\n   * parsePath('/abc?a=1#hash');\n   * // { pathname: '/abc', search: '?a=1', hash: '#hash' }\n   * parsePath('http://example.com/abc?a=1#hash');\n   * // { pathname: '/abc', search: '?a=1', hash: '#hash' }\n   *\n   * @example Hash mode is enabled.\n   * parsePath('/abc?a=1#tma?is=cool#yeah');\n   * // { pathname: '/tma', search: '?is=cool', hash: '#yeah' }\n   * parsePath('http://example.com/abc?a=1#tma?is=cool#yeah');\n   * // { pathname: '/tma', search: '?is=cool', hash: '#yeah' }\n   */\n  parsePath(t) {\n    let s = U(t);\n    return this.hashMode && (s = U(s.hash.slice(1))), {\n      pathname: s.pathname,\n      search: s.search,\n      hash: s.hash\n    };\n  }\n  push(t, s) {\n    const n = Q(t, this.path), { state: r = s } = n.params;\n    this.navigator.push({ ...n, params: { ...n.params, state: r } });\n  }\n  replace(t, s) {\n    const n = Q(t, this.path), { state: r = s } = n.params;\n    this.navigator.replace({ ...n, params: { ...n.params, state: r } });\n  }\n  /**\n   * Combines the navigator `base` property with the passed path data applying the navigator\n   * navigation mode.\n   * @param value - path presented as string or URLLike.\n   */\n  renderPath(t) {\n    const s = (this.base.length === 1 ? \"\" : this.base) + M(H(t), \"/\");\n    return this.hashMode ? M(s.slice(1), this.hashMode === \"classic\" ? \"#\" : \"#/\") : s;\n  }\n  /**\n   * Synchronizes current navigator state with browser history.\n   */\n  async syncHistory() {\n    window.removeEventListener(\"popstate\", this.onPopState);\n    const { state: t } = this, s = this.renderPath(this);\n    await Is(), this.hasPrev && this.hasNext ? (window.history.replaceState(Y, \"\"), window.history.pushState(t, \"\", s), window.history.pushState(Z, \"\"), await N(-1)) : this.hasPrev ? (window.history.replaceState(Y, \"\"), window.history.pushState(t, \"\", s)) : this.hasNext ? (window.history.replaceState(t, s), window.history.pushState(Z, \"\"), await N(-1)) : (window.history.replaceState(Pt, \"\"), window.history.pushState(t, \"\", s)), window.addEventListener(\"popstate\", this.onPopState);\n  }\n  /**\n   * Current query parameters.\n   * @see URL.search\n   * @example\n   * \"\", \"?\", \"?a=1\"\n   */\n  get search() {\n    return (this.navigator.current.params || {}).search || \"\";\n  }\n  /**\n   * Current history item state.\n   */\n  get state() {\n    return (this.navigator.current.params || {}).state;\n  }\n}\nfunction ks(e) {\n  e || (e = {});\n  const { href: t, hash: s } = window.location;\n  let n = H(\n    e.hashMode === null ? t : s.includes(\"?\") ? s.slice(1) : `?${s.slice(1)}`\n  );\n  const r = e.base ? ee(e.base) : void 0;\n  if (r) {\n    if (!n.startsWith(r))\n      throw m(\n        Ee,\n        `Path \"${n}\" expected to be starting with \"${r}\"`\n      );\n    n = n.slice(r.length);\n  }\n  return new se([n], 0, e);\n}\nfunction xn(e) {\n  const t = e.match(/#(.+)/);\n  return t ? t[1] : null;\n}\nfunction qs(e, t) {\n  if (Qt()) {\n    const s = sessionStorage.getItem(e);\n    if (s)\n      try {\n        const { index: n, history: r } = JSON.parse(s);\n        return new se(\n          r,\n          n,\n          t\n        );\n      } catch (n) {\n        console.error(\"Unable to restore hash navigator state.\", n);\n      }\n  }\n  return ks(t);\n}\nfunction Cn(e, t) {\n  const s = qs(e, t), n = () => sessionStorage.setItem(e, JSON.stringify({\n    index: s.index,\n    history: s.history\n  }));\n  return s.on(\"change\", n), n(), s;\n}\nfunction d(e, t) {\n  function s(n) {\n    return function(i, o, a) {\n      return (p) => {\n        const u = {\n          ...p,\n          [i]: n(o)\n        };\n        return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(a, { ...u });\n      };\n    };\n  }\n  return [s(e), s(t)];\n}\nconst ne = (0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)(void 0);\nfunction Os() {\n  const e = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(ne);\n  if (!e)\n    throw new Error(\"useSDK was used outside the SDKProvider.\");\n  return e;\n}\nfunction _(e) {\n  function t(n) {\n    const r = Os(), [i, o] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(\n      n ? void 0 : () => {\n        if (Ss())\n          throw new Error(\"Using hooks on the server side, you must explicitly specify ssr = true option\");\n        return r.use(e);\n      }\n    );\n    return (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(() => {\n      o(r.use(e));\n    }, [r]), i;\n  }\n  function s(n) {\n    const r = t(n);\n    if (r) {\n      if (\"error\" in r)\n        throw r.error;\n      return r.result;\n    }\n  }\n  return [t, s];\n}\nconst [Ns, Ds] = _(Ge), [Sn, Tn] = d(\n  Ns,\n  Ds\n), [Bs, Ms] = _(Ke), [An, In] = d(\n  Bs,\n  Ms\n), [Vs, Ls] = _(Fe), [kn, qn] = d(\n  Vs,\n  Ls\n), [$s, Us] = _(ts), [On, Nn] = d(\n  $s,\n  Us\n), [Hs, Ws] = _(ss), [Dn, Bn] = d(\n  Hs,\n  Ws\n), [Gs, js] = _(rs), [Mn, Vn] = d(Gs, js), [zs, Ks] = _(os), [Ln, $n] = d(zs, Ks), [Js, Fs] = _(cs), [Un, Hn] = d(Js, Fs), [Qs, Ys] = _(ls), [Wn, Gn] = d(Qs, Ys), [Zs, Xs] = _(ws), [jn, zn] = d(Zs, Xs), [tn, en] = _(fs), [Kn, Jn] = d(tn, en), [sn, nn] = _(bs), [Fn, Qn] = d(\n  sn,\n  nn\n), [rn, on] = _(ys), [Yn, Zn] = d(rn, on);\nfunction Xn(e) {\n  const [t, s] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(() => e ? void 0 : nt());\n  return (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(() => {\n    e && s(nt());\n  }, []), t;\n}\nconst [an, cn] = _(Ps), [tr, er] = d(an, cn), [hn, pn] = _(xs), [sr, nr] = d(hn, pn);\nfunction rr({ children: e, acceptCustomStyles: t, debug: s }) {\n  const n = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(!0), [r, i] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(/* @__PURE__ */ new Map()), o = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(r), a = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(\n    (u) => {\n      n.current && i((S) => (u && u(S), new Map(S)));\n    },\n    []\n  ), p = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(() => ({\n    use(u, ...S) {\n      const gt = r.get(u);\n      if (gt)\n        return gt;\n      let b, K;\n      try {\n        b = u(...S);\n      } catch (f) {\n        K = f;\n      }\n      function $(f) {\n        return r.set(u, f), f;\n      }\n      if (K)\n        return $({ error: K });\n      let I;\n      if (Array.isArray(b) && (I = b[1], b = b[0]), !b)\n        return $({ result: b, cleanup: I });\n      function ft(f) {\n        if (\"on\" in f) {\n          const k = f.on(\"change\", () => a()), mt = I;\n          I = () => {\n            mt && mt(), k();\n          };\n        }\n        return { result: f, cleanup: I };\n      }\n      return b instanceof Promise ? (b.then(\n        (f) => a((k) => k.set(u, ft(f))),\n        (f) => a((k) => k.set(u, { error: f }))\n      ), $({})) : $(ft(b));\n    }\n  }), [r]);\n  return (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(() => (n.current = !0, () => {\n    n.current = !1;\n  }), []), (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(() => {\n    if (ht())\n      return Cs(t);\n  }, [t]), (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(() => {\n    le(s || !1);\n  }, [s]), (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(() => {\n    o.current = r;\n  }, [r]), (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(() => () => {\n    o.current.forEach((u) => {\n      \"cleanup\" in u && u.cleanup && u.cleanup();\n    });\n  }, []), /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(ne.Provider, { value: p, children: e });\n}\n\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tma.js/sdk-react/dist/index.js\n");

/***/ })

};
;